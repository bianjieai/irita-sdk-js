// source: irismod/coinswap/tx.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var irismod_coinswap_coinswap_pb = require('../../irismod/coinswap/coinswap_pb.js');
goog.object.extend(proto, irismod_coinswap_coinswap_pb);
var cosmos_base_v1beta1_coin_pb = require('../../cosmos/base/v1beta1/coin_pb.js');
goog.object.extend(proto, cosmos_base_v1beta1_coin_pb);
var gogoproto_gogo_pb = require('../../gogoproto/gogo_pb.js');
goog.object.extend(proto, gogoproto_gogo_pb);
goog.exportSymbol('proto.irismod.coinswap.MsgAddLiquidity', null, global);
goog.exportSymbol('proto.irismod.coinswap.MsgAddLiquidityResponse', null, global);
goog.exportSymbol('proto.irismod.coinswap.MsgRemoveLiquidity', null, global);
goog.exportSymbol('proto.irismod.coinswap.MsgRemoveLiquidityResponse', null, global);
goog.exportSymbol('proto.irismod.coinswap.MsgSwapCoinResponse', null, global);
goog.exportSymbol('proto.irismod.coinswap.MsgSwapOrder', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.irismod.coinswap.MsgAddLiquidity = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.irismod.coinswap.MsgAddLiquidity, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.irismod.coinswap.MsgAddLiquidity.displayName = 'proto.irismod.coinswap.MsgAddLiquidity';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.irismod.coinswap.MsgAddLiquidityResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.irismod.coinswap.MsgAddLiquidityResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.irismod.coinswap.MsgAddLiquidityResponse.displayName = 'proto.irismod.coinswap.MsgAddLiquidityResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.irismod.coinswap.MsgRemoveLiquidity = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.irismod.coinswap.MsgRemoveLiquidity, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.irismod.coinswap.MsgRemoveLiquidity.displayName = 'proto.irismod.coinswap.MsgRemoveLiquidity';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.irismod.coinswap.MsgRemoveLiquidityResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.irismod.coinswap.MsgRemoveLiquidityResponse.repeatedFields_, null);
};
goog.inherits(proto.irismod.coinswap.MsgRemoveLiquidityResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.irismod.coinswap.MsgRemoveLiquidityResponse.displayName = 'proto.irismod.coinswap.MsgRemoveLiquidityResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.irismod.coinswap.MsgSwapOrder = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.irismod.coinswap.MsgSwapOrder, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.irismod.coinswap.MsgSwapOrder.displayName = 'proto.irismod.coinswap.MsgSwapOrder';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.irismod.coinswap.MsgSwapCoinResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.irismod.coinswap.MsgSwapCoinResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.irismod.coinswap.MsgSwapCoinResponse.displayName = 'proto.irismod.coinswap.MsgSwapCoinResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.irismod.coinswap.MsgAddLiquidity.prototype.toObject = function(opt_includeInstance) {
  return proto.irismod.coinswap.MsgAddLiquidity.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.irismod.coinswap.MsgAddLiquidity} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.irismod.coinswap.MsgAddLiquidity.toObject = function(includeInstance, msg) {
  var f, obj = {
    maxToken: (f = msg.getMaxToken()) && cosmos_base_v1beta1_coin_pb.Coin.toObject(includeInstance, f),
    exactStandardAmt: jspb.Message.getFieldWithDefault(msg, 2, ""),
    minLiquidity: jspb.Message.getFieldWithDefault(msg, 3, ""),
    deadline: jspb.Message.getFieldWithDefault(msg, 4, 0),
    sender: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.irismod.coinswap.MsgAddLiquidity}
 */
proto.irismod.coinswap.MsgAddLiquidity.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.irismod.coinswap.MsgAddLiquidity;
  return proto.irismod.coinswap.MsgAddLiquidity.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.irismod.coinswap.MsgAddLiquidity} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.irismod.coinswap.MsgAddLiquidity}
 */
proto.irismod.coinswap.MsgAddLiquidity.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new cosmos_base_v1beta1_coin_pb.Coin;
      reader.readMessage(value,cosmos_base_v1beta1_coin_pb.Coin.deserializeBinaryFromReader);
      msg.setMaxToken(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setExactStandardAmt(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMinLiquidity(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setDeadline(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setSender(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.irismod.coinswap.MsgAddLiquidity.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.irismod.coinswap.MsgAddLiquidity.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.irismod.coinswap.MsgAddLiquidity} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.irismod.coinswap.MsgAddLiquidity.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMaxToken();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      cosmos_base_v1beta1_coin_pb.Coin.serializeBinaryToWriter
    );
  }
  f = message.getExactStandardAmt();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMinLiquidity();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDeadline();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getSender();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional cosmos.base.v1beta1.Coin max_token = 1;
 * @return {?proto.cosmos.base.v1beta1.Coin}
 */
proto.irismod.coinswap.MsgAddLiquidity.prototype.getMaxToken = function() {
  return /** @type{?proto.cosmos.base.v1beta1.Coin} */ (
    jspb.Message.getWrapperField(this, cosmos_base_v1beta1_coin_pb.Coin, 1));
};


/**
 * @param {?proto.cosmos.base.v1beta1.Coin|undefined} value
 * @return {!proto.irismod.coinswap.MsgAddLiquidity} returns this
*/
proto.irismod.coinswap.MsgAddLiquidity.prototype.setMaxToken = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.irismod.coinswap.MsgAddLiquidity} returns this
 */
proto.irismod.coinswap.MsgAddLiquidity.prototype.clearMaxToken = function() {
  return this.setMaxToken(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.irismod.coinswap.MsgAddLiquidity.prototype.hasMaxToken = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string exact_standard_amt = 2;
 * @return {string}
 */
proto.irismod.coinswap.MsgAddLiquidity.prototype.getExactStandardAmt = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.irismod.coinswap.MsgAddLiquidity} returns this
 */
proto.irismod.coinswap.MsgAddLiquidity.prototype.setExactStandardAmt = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string min_liquidity = 3;
 * @return {string}
 */
proto.irismod.coinswap.MsgAddLiquidity.prototype.getMinLiquidity = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.irismod.coinswap.MsgAddLiquidity} returns this
 */
proto.irismod.coinswap.MsgAddLiquidity.prototype.setMinLiquidity = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int64 deadline = 4;
 * @return {number}
 */
proto.irismod.coinswap.MsgAddLiquidity.prototype.getDeadline = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.irismod.coinswap.MsgAddLiquidity} returns this
 */
proto.irismod.coinswap.MsgAddLiquidity.prototype.setDeadline = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string sender = 5;
 * @return {string}
 */
proto.irismod.coinswap.MsgAddLiquidity.prototype.getSender = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.irismod.coinswap.MsgAddLiquidity} returns this
 */
proto.irismod.coinswap.MsgAddLiquidity.prototype.setSender = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.irismod.coinswap.MsgAddLiquidityResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.irismod.coinswap.MsgAddLiquidityResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.irismod.coinswap.MsgAddLiquidityResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.irismod.coinswap.MsgAddLiquidityResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    mintToken: (f = msg.getMintToken()) && cosmos_base_v1beta1_coin_pb.Coin.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.irismod.coinswap.MsgAddLiquidityResponse}
 */
proto.irismod.coinswap.MsgAddLiquidityResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.irismod.coinswap.MsgAddLiquidityResponse;
  return proto.irismod.coinswap.MsgAddLiquidityResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.irismod.coinswap.MsgAddLiquidityResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.irismod.coinswap.MsgAddLiquidityResponse}
 */
proto.irismod.coinswap.MsgAddLiquidityResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new cosmos_base_v1beta1_coin_pb.Coin;
      reader.readMessage(value,cosmos_base_v1beta1_coin_pb.Coin.deserializeBinaryFromReader);
      msg.setMintToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.irismod.coinswap.MsgAddLiquidityResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.irismod.coinswap.MsgAddLiquidityResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.irismod.coinswap.MsgAddLiquidityResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.irismod.coinswap.MsgAddLiquidityResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMintToken();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      cosmos_base_v1beta1_coin_pb.Coin.serializeBinaryToWriter
    );
  }
};


/**
 * optional cosmos.base.v1beta1.Coin mint_token = 1;
 * @return {?proto.cosmos.base.v1beta1.Coin}
 */
proto.irismod.coinswap.MsgAddLiquidityResponse.prototype.getMintToken = function() {
  return /** @type{?proto.cosmos.base.v1beta1.Coin} */ (
    jspb.Message.getWrapperField(this, cosmos_base_v1beta1_coin_pb.Coin, 1));
};


/**
 * @param {?proto.cosmos.base.v1beta1.Coin|undefined} value
 * @return {!proto.irismod.coinswap.MsgAddLiquidityResponse} returns this
*/
proto.irismod.coinswap.MsgAddLiquidityResponse.prototype.setMintToken = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.irismod.coinswap.MsgAddLiquidityResponse} returns this
 */
proto.irismod.coinswap.MsgAddLiquidityResponse.prototype.clearMintToken = function() {
  return this.setMintToken(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.irismod.coinswap.MsgAddLiquidityResponse.prototype.hasMintToken = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.irismod.coinswap.MsgRemoveLiquidity.prototype.toObject = function(opt_includeInstance) {
  return proto.irismod.coinswap.MsgRemoveLiquidity.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.irismod.coinswap.MsgRemoveLiquidity} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.irismod.coinswap.MsgRemoveLiquidity.toObject = function(includeInstance, msg) {
  var f, obj = {
    withdrawLiquidity: (f = msg.getWithdrawLiquidity()) && cosmos_base_v1beta1_coin_pb.Coin.toObject(includeInstance, f),
    minToken: jspb.Message.getFieldWithDefault(msg, 2, ""),
    minStandardAmt: jspb.Message.getFieldWithDefault(msg, 3, ""),
    deadline: jspb.Message.getFieldWithDefault(msg, 4, 0),
    sender: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.irismod.coinswap.MsgRemoveLiquidity}
 */
proto.irismod.coinswap.MsgRemoveLiquidity.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.irismod.coinswap.MsgRemoveLiquidity;
  return proto.irismod.coinswap.MsgRemoveLiquidity.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.irismod.coinswap.MsgRemoveLiquidity} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.irismod.coinswap.MsgRemoveLiquidity}
 */
proto.irismod.coinswap.MsgRemoveLiquidity.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new cosmos_base_v1beta1_coin_pb.Coin;
      reader.readMessage(value,cosmos_base_v1beta1_coin_pb.Coin.deserializeBinaryFromReader);
      msg.setWithdrawLiquidity(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMinToken(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMinStandardAmt(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setDeadline(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setSender(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.irismod.coinswap.MsgRemoveLiquidity.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.irismod.coinswap.MsgRemoveLiquidity.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.irismod.coinswap.MsgRemoveLiquidity} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.irismod.coinswap.MsgRemoveLiquidity.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWithdrawLiquidity();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      cosmos_base_v1beta1_coin_pb.Coin.serializeBinaryToWriter
    );
  }
  f = message.getMinToken();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMinStandardAmt();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDeadline();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getSender();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional cosmos.base.v1beta1.Coin withdraw_liquidity = 1;
 * @return {?proto.cosmos.base.v1beta1.Coin}
 */
proto.irismod.coinswap.MsgRemoveLiquidity.prototype.getWithdrawLiquidity = function() {
  return /** @type{?proto.cosmos.base.v1beta1.Coin} */ (
    jspb.Message.getWrapperField(this, cosmos_base_v1beta1_coin_pb.Coin, 1));
};


/**
 * @param {?proto.cosmos.base.v1beta1.Coin|undefined} value
 * @return {!proto.irismod.coinswap.MsgRemoveLiquidity} returns this
*/
proto.irismod.coinswap.MsgRemoveLiquidity.prototype.setWithdrawLiquidity = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.irismod.coinswap.MsgRemoveLiquidity} returns this
 */
proto.irismod.coinswap.MsgRemoveLiquidity.prototype.clearWithdrawLiquidity = function() {
  return this.setWithdrawLiquidity(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.irismod.coinswap.MsgRemoveLiquidity.prototype.hasWithdrawLiquidity = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string min_token = 2;
 * @return {string}
 */
proto.irismod.coinswap.MsgRemoveLiquidity.prototype.getMinToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.irismod.coinswap.MsgRemoveLiquidity} returns this
 */
proto.irismod.coinswap.MsgRemoveLiquidity.prototype.setMinToken = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string min_standard_amt = 3;
 * @return {string}
 */
proto.irismod.coinswap.MsgRemoveLiquidity.prototype.getMinStandardAmt = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.irismod.coinswap.MsgRemoveLiquidity} returns this
 */
proto.irismod.coinswap.MsgRemoveLiquidity.prototype.setMinStandardAmt = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int64 deadline = 4;
 * @return {number}
 */
proto.irismod.coinswap.MsgRemoveLiquidity.prototype.getDeadline = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.irismod.coinswap.MsgRemoveLiquidity} returns this
 */
proto.irismod.coinswap.MsgRemoveLiquidity.prototype.setDeadline = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string sender = 5;
 * @return {string}
 */
proto.irismod.coinswap.MsgRemoveLiquidity.prototype.getSender = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.irismod.coinswap.MsgRemoveLiquidity} returns this
 */
proto.irismod.coinswap.MsgRemoveLiquidity.prototype.setSender = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.irismod.coinswap.MsgRemoveLiquidityResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.irismod.coinswap.MsgRemoveLiquidityResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.irismod.coinswap.MsgRemoveLiquidityResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.irismod.coinswap.MsgRemoveLiquidityResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.irismod.coinswap.MsgRemoveLiquidityResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    withdrawCoinsList: jspb.Message.toObjectList(msg.getWithdrawCoinsList(),
    cosmos_base_v1beta1_coin_pb.Coin.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.irismod.coinswap.MsgRemoveLiquidityResponse}
 */
proto.irismod.coinswap.MsgRemoveLiquidityResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.irismod.coinswap.MsgRemoveLiquidityResponse;
  return proto.irismod.coinswap.MsgRemoveLiquidityResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.irismod.coinswap.MsgRemoveLiquidityResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.irismod.coinswap.MsgRemoveLiquidityResponse}
 */
proto.irismod.coinswap.MsgRemoveLiquidityResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new cosmos_base_v1beta1_coin_pb.Coin;
      reader.readMessage(value,cosmos_base_v1beta1_coin_pb.Coin.deserializeBinaryFromReader);
      msg.addWithdrawCoins(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.irismod.coinswap.MsgRemoveLiquidityResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.irismod.coinswap.MsgRemoveLiquidityResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.irismod.coinswap.MsgRemoveLiquidityResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.irismod.coinswap.MsgRemoveLiquidityResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWithdrawCoinsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      cosmos_base_v1beta1_coin_pb.Coin.serializeBinaryToWriter
    );
  }
};


/**
 * repeated cosmos.base.v1beta1.Coin withdraw_coins = 1;
 * @return {!Array<!proto.cosmos.base.v1beta1.Coin>}
 */
proto.irismod.coinswap.MsgRemoveLiquidityResponse.prototype.getWithdrawCoinsList = function() {
  return /** @type{!Array<!proto.cosmos.base.v1beta1.Coin>} */ (
    jspb.Message.getRepeatedWrapperField(this, cosmos_base_v1beta1_coin_pb.Coin, 1));
};


/**
 * @param {!Array<!proto.cosmos.base.v1beta1.Coin>} value
 * @return {!proto.irismod.coinswap.MsgRemoveLiquidityResponse} returns this
*/
proto.irismod.coinswap.MsgRemoveLiquidityResponse.prototype.setWithdrawCoinsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.cosmos.base.v1beta1.Coin=} opt_value
 * @param {number=} opt_index
 * @return {!proto.cosmos.base.v1beta1.Coin}
 */
proto.irismod.coinswap.MsgRemoveLiquidityResponse.prototype.addWithdrawCoins = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.cosmos.base.v1beta1.Coin, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.irismod.coinswap.MsgRemoveLiquidityResponse} returns this
 */
proto.irismod.coinswap.MsgRemoveLiquidityResponse.prototype.clearWithdrawCoinsList = function() {
  return this.setWithdrawCoinsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.irismod.coinswap.MsgSwapOrder.prototype.toObject = function(opt_includeInstance) {
  return proto.irismod.coinswap.MsgSwapOrder.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.irismod.coinswap.MsgSwapOrder} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.irismod.coinswap.MsgSwapOrder.toObject = function(includeInstance, msg) {
  var f, obj = {
    input: (f = msg.getInput()) && irismod_coinswap_coinswap_pb.Input.toObject(includeInstance, f),
    output: (f = msg.getOutput()) && irismod_coinswap_coinswap_pb.Output.toObject(includeInstance, f),
    deadline: jspb.Message.getFieldWithDefault(msg, 3, 0),
    isBuyOrder: jspb.Message.getBooleanFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.irismod.coinswap.MsgSwapOrder}
 */
proto.irismod.coinswap.MsgSwapOrder.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.irismod.coinswap.MsgSwapOrder;
  return proto.irismod.coinswap.MsgSwapOrder.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.irismod.coinswap.MsgSwapOrder} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.irismod.coinswap.MsgSwapOrder}
 */
proto.irismod.coinswap.MsgSwapOrder.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new irismod_coinswap_coinswap_pb.Input;
      reader.readMessage(value,irismod_coinswap_coinswap_pb.Input.deserializeBinaryFromReader);
      msg.setInput(value);
      break;
    case 2:
      var value = new irismod_coinswap_coinswap_pb.Output;
      reader.readMessage(value,irismod_coinswap_coinswap_pb.Output.deserializeBinaryFromReader);
      msg.setOutput(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setDeadline(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsBuyOrder(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.irismod.coinswap.MsgSwapOrder.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.irismod.coinswap.MsgSwapOrder.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.irismod.coinswap.MsgSwapOrder} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.irismod.coinswap.MsgSwapOrder.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInput();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      irismod_coinswap_coinswap_pb.Input.serializeBinaryToWriter
    );
  }
  f = message.getOutput();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      irismod_coinswap_coinswap_pb.Output.serializeBinaryToWriter
    );
  }
  f = message.getDeadline();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getIsBuyOrder();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional Input input = 1;
 * @return {?proto.irismod.coinswap.Input}
 */
proto.irismod.coinswap.MsgSwapOrder.prototype.getInput = function() {
  return /** @type{?proto.irismod.coinswap.Input} */ (
    jspb.Message.getWrapperField(this, irismod_coinswap_coinswap_pb.Input, 1));
};


/**
 * @param {?proto.irismod.coinswap.Input|undefined} value
 * @return {!proto.irismod.coinswap.MsgSwapOrder} returns this
*/
proto.irismod.coinswap.MsgSwapOrder.prototype.setInput = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.irismod.coinswap.MsgSwapOrder} returns this
 */
proto.irismod.coinswap.MsgSwapOrder.prototype.clearInput = function() {
  return this.setInput(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.irismod.coinswap.MsgSwapOrder.prototype.hasInput = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Output output = 2;
 * @return {?proto.irismod.coinswap.Output}
 */
proto.irismod.coinswap.MsgSwapOrder.prototype.getOutput = function() {
  return /** @type{?proto.irismod.coinswap.Output} */ (
    jspb.Message.getWrapperField(this, irismod_coinswap_coinswap_pb.Output, 2));
};


/**
 * @param {?proto.irismod.coinswap.Output|undefined} value
 * @return {!proto.irismod.coinswap.MsgSwapOrder} returns this
*/
proto.irismod.coinswap.MsgSwapOrder.prototype.setOutput = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.irismod.coinswap.MsgSwapOrder} returns this
 */
proto.irismod.coinswap.MsgSwapOrder.prototype.clearOutput = function() {
  return this.setOutput(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.irismod.coinswap.MsgSwapOrder.prototype.hasOutput = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int64 deadline = 3;
 * @return {number}
 */
proto.irismod.coinswap.MsgSwapOrder.prototype.getDeadline = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.irismod.coinswap.MsgSwapOrder} returns this
 */
proto.irismod.coinswap.MsgSwapOrder.prototype.setDeadline = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bool is_buy_order = 4;
 * @return {boolean}
 */
proto.irismod.coinswap.MsgSwapOrder.prototype.getIsBuyOrder = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.irismod.coinswap.MsgSwapOrder} returns this
 */
proto.irismod.coinswap.MsgSwapOrder.prototype.setIsBuyOrder = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.irismod.coinswap.MsgSwapCoinResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.irismod.coinswap.MsgSwapCoinResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.irismod.coinswap.MsgSwapCoinResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.irismod.coinswap.MsgSwapCoinResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.irismod.coinswap.MsgSwapCoinResponse}
 */
proto.irismod.coinswap.MsgSwapCoinResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.irismod.coinswap.MsgSwapCoinResponse;
  return proto.irismod.coinswap.MsgSwapCoinResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.irismod.coinswap.MsgSwapCoinResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.irismod.coinswap.MsgSwapCoinResponse}
 */
proto.irismod.coinswap.MsgSwapCoinResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.irismod.coinswap.MsgSwapCoinResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.irismod.coinswap.MsgSwapCoinResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.irismod.coinswap.MsgSwapCoinResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.irismod.coinswap.MsgSwapCoinResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


goog.object.extend(exports, proto.irismod.coinswap);
