// source: ibc/lightclients/solomachine/v1/solomachine.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var ibc_core_connection_v1_connection_pb = require('../../../../ibc/core/connection/v1/connection_pb.js');
goog.object.extend(proto, ibc_core_connection_v1_connection_pb);
var ibc_core_channel_v1_channel_pb = require('../../../../ibc/core/channel/v1/channel_pb.js');
goog.object.extend(proto, ibc_core_channel_v1_channel_pb);
var gogoproto_gogo_pb = require('../../../../gogoproto/gogo_pb.js');
goog.object.extend(proto, gogoproto_gogo_pb);
var google_protobuf_any_pb = require('google-protobuf/google/protobuf/any_pb.js');
goog.object.extend(proto, google_protobuf_any_pb);
goog.exportSymbol('proto.ibc.lightclients.solomachine.v1.ChannelStateData', null, global);
goog.exportSymbol('proto.ibc.lightclients.solomachine.v1.ClientState', null, global);
goog.exportSymbol('proto.ibc.lightclients.solomachine.v1.ClientStateData', null, global);
goog.exportSymbol('proto.ibc.lightclients.solomachine.v1.ConnectionStateData', null, global);
goog.exportSymbol('proto.ibc.lightclients.solomachine.v1.ConsensusState', null, global);
goog.exportSymbol('proto.ibc.lightclients.solomachine.v1.ConsensusStateData', null, global);
goog.exportSymbol('proto.ibc.lightclients.solomachine.v1.DataType', null, global);
goog.exportSymbol('proto.ibc.lightclients.solomachine.v1.Header', null, global);
goog.exportSymbol('proto.ibc.lightclients.solomachine.v1.HeaderData', null, global);
goog.exportSymbol('proto.ibc.lightclients.solomachine.v1.Misbehaviour', null, global);
goog.exportSymbol('proto.ibc.lightclients.solomachine.v1.NextSequenceRecvData', null, global);
goog.exportSymbol('proto.ibc.lightclients.solomachine.v1.PacketAcknowledgementData', null, global);
goog.exportSymbol('proto.ibc.lightclients.solomachine.v1.PacketCommitmentData', null, global);
goog.exportSymbol('proto.ibc.lightclients.solomachine.v1.PacketReceiptAbsenceData', null, global);
goog.exportSymbol('proto.ibc.lightclients.solomachine.v1.SignBytes', null, global);
goog.exportSymbol('proto.ibc.lightclients.solomachine.v1.SignatureAndData', null, global);
goog.exportSymbol('proto.ibc.lightclients.solomachine.v1.TimestampedSignatureData', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ibc.lightclients.solomachine.v1.ClientState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ibc.lightclients.solomachine.v1.ClientState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ibc.lightclients.solomachine.v1.ClientState.displayName = 'proto.ibc.lightclients.solomachine.v1.ClientState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ibc.lightclients.solomachine.v1.ConsensusState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ibc.lightclients.solomachine.v1.ConsensusState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ibc.lightclients.solomachine.v1.ConsensusState.displayName = 'proto.ibc.lightclients.solomachine.v1.ConsensusState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ibc.lightclients.solomachine.v1.Header = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ibc.lightclients.solomachine.v1.Header, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ibc.lightclients.solomachine.v1.Header.displayName = 'proto.ibc.lightclients.solomachine.v1.Header';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ibc.lightclients.solomachine.v1.Misbehaviour = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ibc.lightclients.solomachine.v1.Misbehaviour, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ibc.lightclients.solomachine.v1.Misbehaviour.displayName = 'proto.ibc.lightclients.solomachine.v1.Misbehaviour';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ibc.lightclients.solomachine.v1.SignatureAndData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ibc.lightclients.solomachine.v1.SignatureAndData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ibc.lightclients.solomachine.v1.SignatureAndData.displayName = 'proto.ibc.lightclients.solomachine.v1.SignatureAndData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ibc.lightclients.solomachine.v1.TimestampedSignatureData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ibc.lightclients.solomachine.v1.TimestampedSignatureData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ibc.lightclients.solomachine.v1.TimestampedSignatureData.displayName = 'proto.ibc.lightclients.solomachine.v1.TimestampedSignatureData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ibc.lightclients.solomachine.v1.SignBytes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ibc.lightclients.solomachine.v1.SignBytes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ibc.lightclients.solomachine.v1.SignBytes.displayName = 'proto.ibc.lightclients.solomachine.v1.SignBytes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ibc.lightclients.solomachine.v1.HeaderData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ibc.lightclients.solomachine.v1.HeaderData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ibc.lightclients.solomachine.v1.HeaderData.displayName = 'proto.ibc.lightclients.solomachine.v1.HeaderData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ibc.lightclients.solomachine.v1.ClientStateData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ibc.lightclients.solomachine.v1.ClientStateData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ibc.lightclients.solomachine.v1.ClientStateData.displayName = 'proto.ibc.lightclients.solomachine.v1.ClientStateData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ibc.lightclients.solomachine.v1.ConsensusStateData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ibc.lightclients.solomachine.v1.ConsensusStateData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ibc.lightclients.solomachine.v1.ConsensusStateData.displayName = 'proto.ibc.lightclients.solomachine.v1.ConsensusStateData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ibc.lightclients.solomachine.v1.ConnectionStateData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ibc.lightclients.solomachine.v1.ConnectionStateData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ibc.lightclients.solomachine.v1.ConnectionStateData.displayName = 'proto.ibc.lightclients.solomachine.v1.ConnectionStateData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ibc.lightclients.solomachine.v1.ChannelStateData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ibc.lightclients.solomachine.v1.ChannelStateData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ibc.lightclients.solomachine.v1.ChannelStateData.displayName = 'proto.ibc.lightclients.solomachine.v1.ChannelStateData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ibc.lightclients.solomachine.v1.PacketCommitmentData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ibc.lightclients.solomachine.v1.PacketCommitmentData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ibc.lightclients.solomachine.v1.PacketCommitmentData.displayName = 'proto.ibc.lightclients.solomachine.v1.PacketCommitmentData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ibc.lightclients.solomachine.v1.PacketAcknowledgementData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ibc.lightclients.solomachine.v1.PacketAcknowledgementData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ibc.lightclients.solomachine.v1.PacketAcknowledgementData.displayName = 'proto.ibc.lightclients.solomachine.v1.PacketAcknowledgementData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ibc.lightclients.solomachine.v1.PacketReceiptAbsenceData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ibc.lightclients.solomachine.v1.PacketReceiptAbsenceData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ibc.lightclients.solomachine.v1.PacketReceiptAbsenceData.displayName = 'proto.ibc.lightclients.solomachine.v1.PacketReceiptAbsenceData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ibc.lightclients.solomachine.v1.NextSequenceRecvData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ibc.lightclients.solomachine.v1.NextSequenceRecvData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ibc.lightclients.solomachine.v1.NextSequenceRecvData.displayName = 'proto.ibc.lightclients.solomachine.v1.NextSequenceRecvData';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ibc.lightclients.solomachine.v1.ClientState.prototype.toObject = function(opt_includeInstance) {
  return proto.ibc.lightclients.solomachine.v1.ClientState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ibc.lightclients.solomachine.v1.ClientState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.lightclients.solomachine.v1.ClientState.toObject = function(includeInstance, msg) {
  var f, obj = {
    sequence: jspb.Message.getFieldWithDefault(msg, 1, 0),
    frozenSequence: jspb.Message.getFieldWithDefault(msg, 2, 0),
    consensusState: (f = msg.getConsensusState()) && proto.ibc.lightclients.solomachine.v1.ConsensusState.toObject(includeInstance, f),
    allowUpdateAfterProposal: jspb.Message.getBooleanFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ibc.lightclients.solomachine.v1.ClientState}
 */
proto.ibc.lightclients.solomachine.v1.ClientState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ibc.lightclients.solomachine.v1.ClientState;
  return proto.ibc.lightclients.solomachine.v1.ClientState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ibc.lightclients.solomachine.v1.ClientState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ibc.lightclients.solomachine.v1.ClientState}
 */
proto.ibc.lightclients.solomachine.v1.ClientState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSequence(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFrozenSequence(value);
      break;
    case 3:
      var value = new proto.ibc.lightclients.solomachine.v1.ConsensusState;
      reader.readMessage(value,proto.ibc.lightclients.solomachine.v1.ConsensusState.deserializeBinaryFromReader);
      msg.setConsensusState(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAllowUpdateAfterProposal(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ibc.lightclients.solomachine.v1.ClientState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ibc.lightclients.solomachine.v1.ClientState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ibc.lightclients.solomachine.v1.ClientState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.lightclients.solomachine.v1.ClientState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSequence();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getFrozenSequence();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getConsensusState();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.ibc.lightclients.solomachine.v1.ConsensusState.serializeBinaryToWriter
    );
  }
  f = message.getAllowUpdateAfterProposal();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional uint64 sequence = 1;
 * @return {number}
 */
proto.ibc.lightclients.solomachine.v1.ClientState.prototype.getSequence = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.ibc.lightclients.solomachine.v1.ClientState} returns this
 */
proto.ibc.lightclients.solomachine.v1.ClientState.prototype.setSequence = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 frozen_sequence = 2;
 * @return {number}
 */
proto.ibc.lightclients.solomachine.v1.ClientState.prototype.getFrozenSequence = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ibc.lightclients.solomachine.v1.ClientState} returns this
 */
proto.ibc.lightclients.solomachine.v1.ClientState.prototype.setFrozenSequence = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional ConsensusState consensus_state = 3;
 * @return {?proto.ibc.lightclients.solomachine.v1.ConsensusState}
 */
proto.ibc.lightclients.solomachine.v1.ClientState.prototype.getConsensusState = function() {
  return /** @type{?proto.ibc.lightclients.solomachine.v1.ConsensusState} */ (
    jspb.Message.getWrapperField(this, proto.ibc.lightclients.solomachine.v1.ConsensusState, 3));
};


/**
 * @param {?proto.ibc.lightclients.solomachine.v1.ConsensusState|undefined} value
 * @return {!proto.ibc.lightclients.solomachine.v1.ClientState} returns this
*/
proto.ibc.lightclients.solomachine.v1.ClientState.prototype.setConsensusState = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ibc.lightclients.solomachine.v1.ClientState} returns this
 */
proto.ibc.lightclients.solomachine.v1.ClientState.prototype.clearConsensusState = function() {
  return this.setConsensusState(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ibc.lightclients.solomachine.v1.ClientState.prototype.hasConsensusState = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool allow_update_after_proposal = 4;
 * @return {boolean}
 */
proto.ibc.lightclients.solomachine.v1.ClientState.prototype.getAllowUpdateAfterProposal = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ibc.lightclients.solomachine.v1.ClientState} returns this
 */
proto.ibc.lightclients.solomachine.v1.ClientState.prototype.setAllowUpdateAfterProposal = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ibc.lightclients.solomachine.v1.ConsensusState.prototype.toObject = function(opt_includeInstance) {
  return proto.ibc.lightclients.solomachine.v1.ConsensusState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ibc.lightclients.solomachine.v1.ConsensusState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.lightclients.solomachine.v1.ConsensusState.toObject = function(includeInstance, msg) {
  var f, obj = {
    publicKey: (f = msg.getPublicKey()) && google_protobuf_any_pb.Any.toObject(includeInstance, f),
    diversifier: jspb.Message.getFieldWithDefault(msg, 2, ""),
    timestamp: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ibc.lightclients.solomachine.v1.ConsensusState}
 */
proto.ibc.lightclients.solomachine.v1.ConsensusState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ibc.lightclients.solomachine.v1.ConsensusState;
  return proto.ibc.lightclients.solomachine.v1.ConsensusState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ibc.lightclients.solomachine.v1.ConsensusState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ibc.lightclients.solomachine.v1.ConsensusState}
 */
proto.ibc.lightclients.solomachine.v1.ConsensusState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_protobuf_any_pb.Any;
      reader.readMessage(value,google_protobuf_any_pb.Any.deserializeBinaryFromReader);
      msg.setPublicKey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDiversifier(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ibc.lightclients.solomachine.v1.ConsensusState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ibc.lightclients.solomachine.v1.ConsensusState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ibc.lightclients.solomachine.v1.ConsensusState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.lightclients.solomachine.v1.ConsensusState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPublicKey();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_protobuf_any_pb.Any.serializeBinaryToWriter
    );
  }
  f = message.getDiversifier();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
};


/**
 * optional google.protobuf.Any public_key = 1;
 * @return {?proto.google.protobuf.Any}
 */
proto.ibc.lightclients.solomachine.v1.ConsensusState.prototype.getPublicKey = function() {
  return /** @type{?proto.google.protobuf.Any} */ (
    jspb.Message.getWrapperField(this, google_protobuf_any_pb.Any, 1));
};


/**
 * @param {?proto.google.protobuf.Any|undefined} value
 * @return {!proto.ibc.lightclients.solomachine.v1.ConsensusState} returns this
*/
proto.ibc.lightclients.solomachine.v1.ConsensusState.prototype.setPublicKey = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ibc.lightclients.solomachine.v1.ConsensusState} returns this
 */
proto.ibc.lightclients.solomachine.v1.ConsensusState.prototype.clearPublicKey = function() {
  return this.setPublicKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ibc.lightclients.solomachine.v1.ConsensusState.prototype.hasPublicKey = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string diversifier = 2;
 * @return {string}
 */
proto.ibc.lightclients.solomachine.v1.ConsensusState.prototype.getDiversifier = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ibc.lightclients.solomachine.v1.ConsensusState} returns this
 */
proto.ibc.lightclients.solomachine.v1.ConsensusState.prototype.setDiversifier = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint64 timestamp = 3;
 * @return {number}
 */
proto.ibc.lightclients.solomachine.v1.ConsensusState.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.ibc.lightclients.solomachine.v1.ConsensusState} returns this
 */
proto.ibc.lightclients.solomachine.v1.ConsensusState.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ibc.lightclients.solomachine.v1.Header.prototype.toObject = function(opt_includeInstance) {
  return proto.ibc.lightclients.solomachine.v1.Header.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ibc.lightclients.solomachine.v1.Header} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.lightclients.solomachine.v1.Header.toObject = function(includeInstance, msg) {
  var f, obj = {
    sequence: jspb.Message.getFieldWithDefault(msg, 1, 0),
    timestamp: jspb.Message.getFieldWithDefault(msg, 2, 0),
    signature: msg.getSignature_asB64(),
    newPublicKey: (f = msg.getNewPublicKey()) && google_protobuf_any_pb.Any.toObject(includeInstance, f),
    newDiversifier: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ibc.lightclients.solomachine.v1.Header}
 */
proto.ibc.lightclients.solomachine.v1.Header.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ibc.lightclients.solomachine.v1.Header;
  return proto.ibc.lightclients.solomachine.v1.Header.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ibc.lightclients.solomachine.v1.Header} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ibc.lightclients.solomachine.v1.Header}
 */
proto.ibc.lightclients.solomachine.v1.Header.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSequence(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimestamp(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignature(value);
      break;
    case 4:
      var value = new google_protobuf_any_pb.Any;
      reader.readMessage(value,google_protobuf_any_pb.Any.deserializeBinaryFromReader);
      msg.setNewPublicKey(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setNewDiversifier(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ibc.lightclients.solomachine.v1.Header.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ibc.lightclients.solomachine.v1.Header.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ibc.lightclients.solomachine.v1.Header} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.lightclients.solomachine.v1.Header.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSequence();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getNewPublicKey();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      google_protobuf_any_pb.Any.serializeBinaryToWriter
    );
  }
  f = message.getNewDiversifier();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional uint64 sequence = 1;
 * @return {number}
 */
proto.ibc.lightclients.solomachine.v1.Header.prototype.getSequence = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.ibc.lightclients.solomachine.v1.Header} returns this
 */
proto.ibc.lightclients.solomachine.v1.Header.prototype.setSequence = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 timestamp = 2;
 * @return {number}
 */
proto.ibc.lightclients.solomachine.v1.Header.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ibc.lightclients.solomachine.v1.Header} returns this
 */
proto.ibc.lightclients.solomachine.v1.Header.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bytes signature = 3;
 * @return {!(string|Uint8Array)}
 */
proto.ibc.lightclients.solomachine.v1.Header.prototype.getSignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes signature = 3;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.ibc.lightclients.solomachine.v1.Header.prototype.getSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignature()));
};


/**
 * optional bytes signature = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.ibc.lightclients.solomachine.v1.Header.prototype.getSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignature()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ibc.lightclients.solomachine.v1.Header} returns this
 */
proto.ibc.lightclients.solomachine.v1.Header.prototype.setSignature = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional google.protobuf.Any new_public_key = 4;
 * @return {?proto.google.protobuf.Any}
 */
proto.ibc.lightclients.solomachine.v1.Header.prototype.getNewPublicKey = function() {
  return /** @type{?proto.google.protobuf.Any} */ (
    jspb.Message.getWrapperField(this, google_protobuf_any_pb.Any, 4));
};


/**
 * @param {?proto.google.protobuf.Any|undefined} value
 * @return {!proto.ibc.lightclients.solomachine.v1.Header} returns this
*/
proto.ibc.lightclients.solomachine.v1.Header.prototype.setNewPublicKey = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ibc.lightclients.solomachine.v1.Header} returns this
 */
proto.ibc.lightclients.solomachine.v1.Header.prototype.clearNewPublicKey = function() {
  return this.setNewPublicKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ibc.lightclients.solomachine.v1.Header.prototype.hasNewPublicKey = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string new_diversifier = 5;
 * @return {string}
 */
proto.ibc.lightclients.solomachine.v1.Header.prototype.getNewDiversifier = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.ibc.lightclients.solomachine.v1.Header} returns this
 */
proto.ibc.lightclients.solomachine.v1.Header.prototype.setNewDiversifier = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ibc.lightclients.solomachine.v1.Misbehaviour.prototype.toObject = function(opt_includeInstance) {
  return proto.ibc.lightclients.solomachine.v1.Misbehaviour.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ibc.lightclients.solomachine.v1.Misbehaviour} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.lightclients.solomachine.v1.Misbehaviour.toObject = function(includeInstance, msg) {
  var f, obj = {
    clientId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    sequence: jspb.Message.getFieldWithDefault(msg, 2, 0),
    signatureOne: (f = msg.getSignatureOne()) && proto.ibc.lightclients.solomachine.v1.SignatureAndData.toObject(includeInstance, f),
    signatureTwo: (f = msg.getSignatureTwo()) && proto.ibc.lightclients.solomachine.v1.SignatureAndData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ibc.lightclients.solomachine.v1.Misbehaviour}
 */
proto.ibc.lightclients.solomachine.v1.Misbehaviour.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ibc.lightclients.solomachine.v1.Misbehaviour;
  return proto.ibc.lightclients.solomachine.v1.Misbehaviour.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ibc.lightclients.solomachine.v1.Misbehaviour} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ibc.lightclients.solomachine.v1.Misbehaviour}
 */
proto.ibc.lightclients.solomachine.v1.Misbehaviour.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSequence(value);
      break;
    case 3:
      var value = new proto.ibc.lightclients.solomachine.v1.SignatureAndData;
      reader.readMessage(value,proto.ibc.lightclients.solomachine.v1.SignatureAndData.deserializeBinaryFromReader);
      msg.setSignatureOne(value);
      break;
    case 4:
      var value = new proto.ibc.lightclients.solomachine.v1.SignatureAndData;
      reader.readMessage(value,proto.ibc.lightclients.solomachine.v1.SignatureAndData.deserializeBinaryFromReader);
      msg.setSignatureTwo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ibc.lightclients.solomachine.v1.Misbehaviour.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ibc.lightclients.solomachine.v1.Misbehaviour.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ibc.lightclients.solomachine.v1.Misbehaviour} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.lightclients.solomachine.v1.Misbehaviour.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClientId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSequence();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getSignatureOne();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.ibc.lightclients.solomachine.v1.SignatureAndData.serializeBinaryToWriter
    );
  }
  f = message.getSignatureTwo();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.ibc.lightclients.solomachine.v1.SignatureAndData.serializeBinaryToWriter
    );
  }
};


/**
 * optional string client_id = 1;
 * @return {string}
 */
proto.ibc.lightclients.solomachine.v1.Misbehaviour.prototype.getClientId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ibc.lightclients.solomachine.v1.Misbehaviour} returns this
 */
proto.ibc.lightclients.solomachine.v1.Misbehaviour.prototype.setClientId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 sequence = 2;
 * @return {number}
 */
proto.ibc.lightclients.solomachine.v1.Misbehaviour.prototype.getSequence = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ibc.lightclients.solomachine.v1.Misbehaviour} returns this
 */
proto.ibc.lightclients.solomachine.v1.Misbehaviour.prototype.setSequence = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional SignatureAndData signature_one = 3;
 * @return {?proto.ibc.lightclients.solomachine.v1.SignatureAndData}
 */
proto.ibc.lightclients.solomachine.v1.Misbehaviour.prototype.getSignatureOne = function() {
  return /** @type{?proto.ibc.lightclients.solomachine.v1.SignatureAndData} */ (
    jspb.Message.getWrapperField(this, proto.ibc.lightclients.solomachine.v1.SignatureAndData, 3));
};


/**
 * @param {?proto.ibc.lightclients.solomachine.v1.SignatureAndData|undefined} value
 * @return {!proto.ibc.lightclients.solomachine.v1.Misbehaviour} returns this
*/
proto.ibc.lightclients.solomachine.v1.Misbehaviour.prototype.setSignatureOne = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ibc.lightclients.solomachine.v1.Misbehaviour} returns this
 */
proto.ibc.lightclients.solomachine.v1.Misbehaviour.prototype.clearSignatureOne = function() {
  return this.setSignatureOne(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ibc.lightclients.solomachine.v1.Misbehaviour.prototype.hasSignatureOne = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional SignatureAndData signature_two = 4;
 * @return {?proto.ibc.lightclients.solomachine.v1.SignatureAndData}
 */
proto.ibc.lightclients.solomachine.v1.Misbehaviour.prototype.getSignatureTwo = function() {
  return /** @type{?proto.ibc.lightclients.solomachine.v1.SignatureAndData} */ (
    jspb.Message.getWrapperField(this, proto.ibc.lightclients.solomachine.v1.SignatureAndData, 4));
};


/**
 * @param {?proto.ibc.lightclients.solomachine.v1.SignatureAndData|undefined} value
 * @return {!proto.ibc.lightclients.solomachine.v1.Misbehaviour} returns this
*/
proto.ibc.lightclients.solomachine.v1.Misbehaviour.prototype.setSignatureTwo = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ibc.lightclients.solomachine.v1.Misbehaviour} returns this
 */
proto.ibc.lightclients.solomachine.v1.Misbehaviour.prototype.clearSignatureTwo = function() {
  return this.setSignatureTwo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ibc.lightclients.solomachine.v1.Misbehaviour.prototype.hasSignatureTwo = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ibc.lightclients.solomachine.v1.SignatureAndData.prototype.toObject = function(opt_includeInstance) {
  return proto.ibc.lightclients.solomachine.v1.SignatureAndData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ibc.lightclients.solomachine.v1.SignatureAndData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.lightclients.solomachine.v1.SignatureAndData.toObject = function(includeInstance, msg) {
  var f, obj = {
    signature: msg.getSignature_asB64(),
    dataType: jspb.Message.getFieldWithDefault(msg, 2, 0),
    data: msg.getData_asB64(),
    timestamp: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ibc.lightclients.solomachine.v1.SignatureAndData}
 */
proto.ibc.lightclients.solomachine.v1.SignatureAndData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ibc.lightclients.solomachine.v1.SignatureAndData;
  return proto.ibc.lightclients.solomachine.v1.SignatureAndData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ibc.lightclients.solomachine.v1.SignatureAndData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ibc.lightclients.solomachine.v1.SignatureAndData}
 */
proto.ibc.lightclients.solomachine.v1.SignatureAndData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignature(value);
      break;
    case 2:
      var value = /** @type {!proto.ibc.lightclients.solomachine.v1.DataType} */ (reader.readEnum());
      msg.setDataType(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ibc.lightclients.solomachine.v1.SignatureAndData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ibc.lightclients.solomachine.v1.SignatureAndData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ibc.lightclients.solomachine.v1.SignatureAndData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.lightclients.solomachine.v1.SignatureAndData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getDataType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
};


/**
 * optional bytes signature = 1;
 * @return {!(string|Uint8Array)}
 */
proto.ibc.lightclients.solomachine.v1.SignatureAndData.prototype.getSignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes signature = 1;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.ibc.lightclients.solomachine.v1.SignatureAndData.prototype.getSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignature()));
};


/**
 * optional bytes signature = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.ibc.lightclients.solomachine.v1.SignatureAndData.prototype.getSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignature()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ibc.lightclients.solomachine.v1.SignatureAndData} returns this
 */
proto.ibc.lightclients.solomachine.v1.SignatureAndData.prototype.setSignature = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional DataType data_type = 2;
 * @return {!proto.ibc.lightclients.solomachine.v1.DataType}
 */
proto.ibc.lightclients.solomachine.v1.SignatureAndData.prototype.getDataType = function() {
  return /** @type {!proto.ibc.lightclients.solomachine.v1.DataType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.ibc.lightclients.solomachine.v1.DataType} value
 * @return {!proto.ibc.lightclients.solomachine.v1.SignatureAndData} returns this
 */
proto.ibc.lightclients.solomachine.v1.SignatureAndData.prototype.setDataType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional bytes data = 3;
 * @return {!(string|Uint8Array)}
 */
proto.ibc.lightclients.solomachine.v1.SignatureAndData.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes data = 3;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.ibc.lightclients.solomachine.v1.SignatureAndData.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.ibc.lightclients.solomachine.v1.SignatureAndData.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ibc.lightclients.solomachine.v1.SignatureAndData} returns this
 */
proto.ibc.lightclients.solomachine.v1.SignatureAndData.prototype.setData = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional uint64 timestamp = 4;
 * @return {number}
 */
proto.ibc.lightclients.solomachine.v1.SignatureAndData.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.ibc.lightclients.solomachine.v1.SignatureAndData} returns this
 */
proto.ibc.lightclients.solomachine.v1.SignatureAndData.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ibc.lightclients.solomachine.v1.TimestampedSignatureData.prototype.toObject = function(opt_includeInstance) {
  return proto.ibc.lightclients.solomachine.v1.TimestampedSignatureData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ibc.lightclients.solomachine.v1.TimestampedSignatureData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.lightclients.solomachine.v1.TimestampedSignatureData.toObject = function(includeInstance, msg) {
  var f, obj = {
    signatureData: msg.getSignatureData_asB64(),
    timestamp: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ibc.lightclients.solomachine.v1.TimestampedSignatureData}
 */
proto.ibc.lightclients.solomachine.v1.TimestampedSignatureData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ibc.lightclients.solomachine.v1.TimestampedSignatureData;
  return proto.ibc.lightclients.solomachine.v1.TimestampedSignatureData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ibc.lightclients.solomachine.v1.TimestampedSignatureData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ibc.lightclients.solomachine.v1.TimestampedSignatureData}
 */
proto.ibc.lightclients.solomachine.v1.TimestampedSignatureData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignatureData(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ibc.lightclients.solomachine.v1.TimestampedSignatureData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ibc.lightclients.solomachine.v1.TimestampedSignatureData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ibc.lightclients.solomachine.v1.TimestampedSignatureData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.lightclients.solomachine.v1.TimestampedSignatureData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSignatureData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional bytes signature_data = 1;
 * @return {!(string|Uint8Array)}
 */
proto.ibc.lightclients.solomachine.v1.TimestampedSignatureData.prototype.getSignatureData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes signature_data = 1;
 * This is a type-conversion wrapper around `getSignatureData()`
 * @return {string}
 */
proto.ibc.lightclients.solomachine.v1.TimestampedSignatureData.prototype.getSignatureData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignatureData()));
};


/**
 * optional bytes signature_data = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignatureData()`
 * @return {!Uint8Array}
 */
proto.ibc.lightclients.solomachine.v1.TimestampedSignatureData.prototype.getSignatureData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignatureData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ibc.lightclients.solomachine.v1.TimestampedSignatureData} returns this
 */
proto.ibc.lightclients.solomachine.v1.TimestampedSignatureData.prototype.setSignatureData = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional uint64 timestamp = 2;
 * @return {number}
 */
proto.ibc.lightclients.solomachine.v1.TimestampedSignatureData.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ibc.lightclients.solomachine.v1.TimestampedSignatureData} returns this
 */
proto.ibc.lightclients.solomachine.v1.TimestampedSignatureData.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ibc.lightclients.solomachine.v1.SignBytes.prototype.toObject = function(opt_includeInstance) {
  return proto.ibc.lightclients.solomachine.v1.SignBytes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ibc.lightclients.solomachine.v1.SignBytes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.lightclients.solomachine.v1.SignBytes.toObject = function(includeInstance, msg) {
  var f, obj = {
    sequence: jspb.Message.getFieldWithDefault(msg, 1, 0),
    timestamp: jspb.Message.getFieldWithDefault(msg, 2, 0),
    diversifier: jspb.Message.getFieldWithDefault(msg, 3, ""),
    dataType: jspb.Message.getFieldWithDefault(msg, 4, 0),
    data: msg.getData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ibc.lightclients.solomachine.v1.SignBytes}
 */
proto.ibc.lightclients.solomachine.v1.SignBytes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ibc.lightclients.solomachine.v1.SignBytes;
  return proto.ibc.lightclients.solomachine.v1.SignBytes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ibc.lightclients.solomachine.v1.SignBytes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ibc.lightclients.solomachine.v1.SignBytes}
 */
proto.ibc.lightclients.solomachine.v1.SignBytes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSequence(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimestamp(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDiversifier(value);
      break;
    case 4:
      var value = /** @type {!proto.ibc.lightclients.solomachine.v1.DataType} */ (reader.readEnum());
      msg.setDataType(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ibc.lightclients.solomachine.v1.SignBytes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ibc.lightclients.solomachine.v1.SignBytes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ibc.lightclients.solomachine.v1.SignBytes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.lightclients.solomachine.v1.SignBytes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSequence();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getDiversifier();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDataType();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
};


/**
 * optional uint64 sequence = 1;
 * @return {number}
 */
proto.ibc.lightclients.solomachine.v1.SignBytes.prototype.getSequence = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.ibc.lightclients.solomachine.v1.SignBytes} returns this
 */
proto.ibc.lightclients.solomachine.v1.SignBytes.prototype.setSequence = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 timestamp = 2;
 * @return {number}
 */
proto.ibc.lightclients.solomachine.v1.SignBytes.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ibc.lightclients.solomachine.v1.SignBytes} returns this
 */
proto.ibc.lightclients.solomachine.v1.SignBytes.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string diversifier = 3;
 * @return {string}
 */
proto.ibc.lightclients.solomachine.v1.SignBytes.prototype.getDiversifier = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ibc.lightclients.solomachine.v1.SignBytes} returns this
 */
proto.ibc.lightclients.solomachine.v1.SignBytes.prototype.setDiversifier = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional DataType data_type = 4;
 * @return {!proto.ibc.lightclients.solomachine.v1.DataType}
 */
proto.ibc.lightclients.solomachine.v1.SignBytes.prototype.getDataType = function() {
  return /** @type {!proto.ibc.lightclients.solomachine.v1.DataType} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.ibc.lightclients.solomachine.v1.DataType} value
 * @return {!proto.ibc.lightclients.solomachine.v1.SignBytes} returns this
 */
proto.ibc.lightclients.solomachine.v1.SignBytes.prototype.setDataType = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional bytes data = 5;
 * @return {!(string|Uint8Array)}
 */
proto.ibc.lightclients.solomachine.v1.SignBytes.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes data = 5;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.ibc.lightclients.solomachine.v1.SignBytes.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.ibc.lightclients.solomachine.v1.SignBytes.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ibc.lightclients.solomachine.v1.SignBytes} returns this
 */
proto.ibc.lightclients.solomachine.v1.SignBytes.prototype.setData = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ibc.lightclients.solomachine.v1.HeaderData.prototype.toObject = function(opt_includeInstance) {
  return proto.ibc.lightclients.solomachine.v1.HeaderData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ibc.lightclients.solomachine.v1.HeaderData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.lightclients.solomachine.v1.HeaderData.toObject = function(includeInstance, msg) {
  var f, obj = {
    newPubKey: (f = msg.getNewPubKey()) && google_protobuf_any_pb.Any.toObject(includeInstance, f),
    newDiversifier: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ibc.lightclients.solomachine.v1.HeaderData}
 */
proto.ibc.lightclients.solomachine.v1.HeaderData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ibc.lightclients.solomachine.v1.HeaderData;
  return proto.ibc.lightclients.solomachine.v1.HeaderData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ibc.lightclients.solomachine.v1.HeaderData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ibc.lightclients.solomachine.v1.HeaderData}
 */
proto.ibc.lightclients.solomachine.v1.HeaderData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_protobuf_any_pb.Any;
      reader.readMessage(value,google_protobuf_any_pb.Any.deserializeBinaryFromReader);
      msg.setNewPubKey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNewDiversifier(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ibc.lightclients.solomachine.v1.HeaderData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ibc.lightclients.solomachine.v1.HeaderData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ibc.lightclients.solomachine.v1.HeaderData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.lightclients.solomachine.v1.HeaderData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNewPubKey();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_protobuf_any_pb.Any.serializeBinaryToWriter
    );
  }
  f = message.getNewDiversifier();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional google.protobuf.Any new_pub_key = 1;
 * @return {?proto.google.protobuf.Any}
 */
proto.ibc.lightclients.solomachine.v1.HeaderData.prototype.getNewPubKey = function() {
  return /** @type{?proto.google.protobuf.Any} */ (
    jspb.Message.getWrapperField(this, google_protobuf_any_pb.Any, 1));
};


/**
 * @param {?proto.google.protobuf.Any|undefined} value
 * @return {!proto.ibc.lightclients.solomachine.v1.HeaderData} returns this
*/
proto.ibc.lightclients.solomachine.v1.HeaderData.prototype.setNewPubKey = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ibc.lightclients.solomachine.v1.HeaderData} returns this
 */
proto.ibc.lightclients.solomachine.v1.HeaderData.prototype.clearNewPubKey = function() {
  return this.setNewPubKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ibc.lightclients.solomachine.v1.HeaderData.prototype.hasNewPubKey = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string new_diversifier = 2;
 * @return {string}
 */
proto.ibc.lightclients.solomachine.v1.HeaderData.prototype.getNewDiversifier = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ibc.lightclients.solomachine.v1.HeaderData} returns this
 */
proto.ibc.lightclients.solomachine.v1.HeaderData.prototype.setNewDiversifier = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ibc.lightclients.solomachine.v1.ClientStateData.prototype.toObject = function(opt_includeInstance) {
  return proto.ibc.lightclients.solomachine.v1.ClientStateData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ibc.lightclients.solomachine.v1.ClientStateData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.lightclients.solomachine.v1.ClientStateData.toObject = function(includeInstance, msg) {
  var f, obj = {
    path: msg.getPath_asB64(),
    clientState: (f = msg.getClientState()) && google_protobuf_any_pb.Any.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ibc.lightclients.solomachine.v1.ClientStateData}
 */
proto.ibc.lightclients.solomachine.v1.ClientStateData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ibc.lightclients.solomachine.v1.ClientStateData;
  return proto.ibc.lightclients.solomachine.v1.ClientStateData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ibc.lightclients.solomachine.v1.ClientStateData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ibc.lightclients.solomachine.v1.ClientStateData}
 */
proto.ibc.lightclients.solomachine.v1.ClientStateData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPath(value);
      break;
    case 2:
      var value = new google_protobuf_any_pb.Any;
      reader.readMessage(value,google_protobuf_any_pb.Any.deserializeBinaryFromReader);
      msg.setClientState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ibc.lightclients.solomachine.v1.ClientStateData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ibc.lightclients.solomachine.v1.ClientStateData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ibc.lightclients.solomachine.v1.ClientStateData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.lightclients.solomachine.v1.ClientStateData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPath_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getClientState();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_any_pb.Any.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes path = 1;
 * @return {!(string|Uint8Array)}
 */
proto.ibc.lightclients.solomachine.v1.ClientStateData.prototype.getPath = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes path = 1;
 * This is a type-conversion wrapper around `getPath()`
 * @return {string}
 */
proto.ibc.lightclients.solomachine.v1.ClientStateData.prototype.getPath_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPath()));
};


/**
 * optional bytes path = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPath()`
 * @return {!Uint8Array}
 */
proto.ibc.lightclients.solomachine.v1.ClientStateData.prototype.getPath_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPath()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ibc.lightclients.solomachine.v1.ClientStateData} returns this
 */
proto.ibc.lightclients.solomachine.v1.ClientStateData.prototype.setPath = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional google.protobuf.Any client_state = 2;
 * @return {?proto.google.protobuf.Any}
 */
proto.ibc.lightclients.solomachine.v1.ClientStateData.prototype.getClientState = function() {
  return /** @type{?proto.google.protobuf.Any} */ (
    jspb.Message.getWrapperField(this, google_protobuf_any_pb.Any, 2));
};


/**
 * @param {?proto.google.protobuf.Any|undefined} value
 * @return {!proto.ibc.lightclients.solomachine.v1.ClientStateData} returns this
*/
proto.ibc.lightclients.solomachine.v1.ClientStateData.prototype.setClientState = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ibc.lightclients.solomachine.v1.ClientStateData} returns this
 */
proto.ibc.lightclients.solomachine.v1.ClientStateData.prototype.clearClientState = function() {
  return this.setClientState(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ibc.lightclients.solomachine.v1.ClientStateData.prototype.hasClientState = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ibc.lightclients.solomachine.v1.ConsensusStateData.prototype.toObject = function(opt_includeInstance) {
  return proto.ibc.lightclients.solomachine.v1.ConsensusStateData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ibc.lightclients.solomachine.v1.ConsensusStateData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.lightclients.solomachine.v1.ConsensusStateData.toObject = function(includeInstance, msg) {
  var f, obj = {
    path: msg.getPath_asB64(),
    consensusState: (f = msg.getConsensusState()) && google_protobuf_any_pb.Any.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ibc.lightclients.solomachine.v1.ConsensusStateData}
 */
proto.ibc.lightclients.solomachine.v1.ConsensusStateData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ibc.lightclients.solomachine.v1.ConsensusStateData;
  return proto.ibc.lightclients.solomachine.v1.ConsensusStateData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ibc.lightclients.solomachine.v1.ConsensusStateData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ibc.lightclients.solomachine.v1.ConsensusStateData}
 */
proto.ibc.lightclients.solomachine.v1.ConsensusStateData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPath(value);
      break;
    case 2:
      var value = new google_protobuf_any_pb.Any;
      reader.readMessage(value,google_protobuf_any_pb.Any.deserializeBinaryFromReader);
      msg.setConsensusState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ibc.lightclients.solomachine.v1.ConsensusStateData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ibc.lightclients.solomachine.v1.ConsensusStateData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ibc.lightclients.solomachine.v1.ConsensusStateData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.lightclients.solomachine.v1.ConsensusStateData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPath_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getConsensusState();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_any_pb.Any.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes path = 1;
 * @return {!(string|Uint8Array)}
 */
proto.ibc.lightclients.solomachine.v1.ConsensusStateData.prototype.getPath = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes path = 1;
 * This is a type-conversion wrapper around `getPath()`
 * @return {string}
 */
proto.ibc.lightclients.solomachine.v1.ConsensusStateData.prototype.getPath_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPath()));
};


/**
 * optional bytes path = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPath()`
 * @return {!Uint8Array}
 */
proto.ibc.lightclients.solomachine.v1.ConsensusStateData.prototype.getPath_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPath()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ibc.lightclients.solomachine.v1.ConsensusStateData} returns this
 */
proto.ibc.lightclients.solomachine.v1.ConsensusStateData.prototype.setPath = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional google.protobuf.Any consensus_state = 2;
 * @return {?proto.google.protobuf.Any}
 */
proto.ibc.lightclients.solomachine.v1.ConsensusStateData.prototype.getConsensusState = function() {
  return /** @type{?proto.google.protobuf.Any} */ (
    jspb.Message.getWrapperField(this, google_protobuf_any_pb.Any, 2));
};


/**
 * @param {?proto.google.protobuf.Any|undefined} value
 * @return {!proto.ibc.lightclients.solomachine.v1.ConsensusStateData} returns this
*/
proto.ibc.lightclients.solomachine.v1.ConsensusStateData.prototype.setConsensusState = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ibc.lightclients.solomachine.v1.ConsensusStateData} returns this
 */
proto.ibc.lightclients.solomachine.v1.ConsensusStateData.prototype.clearConsensusState = function() {
  return this.setConsensusState(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ibc.lightclients.solomachine.v1.ConsensusStateData.prototype.hasConsensusState = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ibc.lightclients.solomachine.v1.ConnectionStateData.prototype.toObject = function(opt_includeInstance) {
  return proto.ibc.lightclients.solomachine.v1.ConnectionStateData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ibc.lightclients.solomachine.v1.ConnectionStateData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.lightclients.solomachine.v1.ConnectionStateData.toObject = function(includeInstance, msg) {
  var f, obj = {
    path: msg.getPath_asB64(),
    connection: (f = msg.getConnection()) && ibc_core_connection_v1_connection_pb.ConnectionEnd.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ibc.lightclients.solomachine.v1.ConnectionStateData}
 */
proto.ibc.lightclients.solomachine.v1.ConnectionStateData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ibc.lightclients.solomachine.v1.ConnectionStateData;
  return proto.ibc.lightclients.solomachine.v1.ConnectionStateData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ibc.lightclients.solomachine.v1.ConnectionStateData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ibc.lightclients.solomachine.v1.ConnectionStateData}
 */
proto.ibc.lightclients.solomachine.v1.ConnectionStateData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPath(value);
      break;
    case 2:
      var value = new ibc_core_connection_v1_connection_pb.ConnectionEnd;
      reader.readMessage(value,ibc_core_connection_v1_connection_pb.ConnectionEnd.deserializeBinaryFromReader);
      msg.setConnection(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ibc.lightclients.solomachine.v1.ConnectionStateData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ibc.lightclients.solomachine.v1.ConnectionStateData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ibc.lightclients.solomachine.v1.ConnectionStateData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.lightclients.solomachine.v1.ConnectionStateData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPath_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getConnection();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      ibc_core_connection_v1_connection_pb.ConnectionEnd.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes path = 1;
 * @return {!(string|Uint8Array)}
 */
proto.ibc.lightclients.solomachine.v1.ConnectionStateData.prototype.getPath = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes path = 1;
 * This is a type-conversion wrapper around `getPath()`
 * @return {string}
 */
proto.ibc.lightclients.solomachine.v1.ConnectionStateData.prototype.getPath_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPath()));
};


/**
 * optional bytes path = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPath()`
 * @return {!Uint8Array}
 */
proto.ibc.lightclients.solomachine.v1.ConnectionStateData.prototype.getPath_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPath()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ibc.lightclients.solomachine.v1.ConnectionStateData} returns this
 */
proto.ibc.lightclients.solomachine.v1.ConnectionStateData.prototype.setPath = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional ibc.core.connection.v1.ConnectionEnd connection = 2;
 * @return {?proto.ibc.core.connection.v1.ConnectionEnd}
 */
proto.ibc.lightclients.solomachine.v1.ConnectionStateData.prototype.getConnection = function() {
  return /** @type{?proto.ibc.core.connection.v1.ConnectionEnd} */ (
    jspb.Message.getWrapperField(this, ibc_core_connection_v1_connection_pb.ConnectionEnd, 2));
};


/**
 * @param {?proto.ibc.core.connection.v1.ConnectionEnd|undefined} value
 * @return {!proto.ibc.lightclients.solomachine.v1.ConnectionStateData} returns this
*/
proto.ibc.lightclients.solomachine.v1.ConnectionStateData.prototype.setConnection = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ibc.lightclients.solomachine.v1.ConnectionStateData} returns this
 */
proto.ibc.lightclients.solomachine.v1.ConnectionStateData.prototype.clearConnection = function() {
  return this.setConnection(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ibc.lightclients.solomachine.v1.ConnectionStateData.prototype.hasConnection = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ibc.lightclients.solomachine.v1.ChannelStateData.prototype.toObject = function(opt_includeInstance) {
  return proto.ibc.lightclients.solomachine.v1.ChannelStateData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ibc.lightclients.solomachine.v1.ChannelStateData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.lightclients.solomachine.v1.ChannelStateData.toObject = function(includeInstance, msg) {
  var f, obj = {
    path: msg.getPath_asB64(),
    channel: (f = msg.getChannel()) && ibc_core_channel_v1_channel_pb.Channel.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ibc.lightclients.solomachine.v1.ChannelStateData}
 */
proto.ibc.lightclients.solomachine.v1.ChannelStateData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ibc.lightclients.solomachine.v1.ChannelStateData;
  return proto.ibc.lightclients.solomachine.v1.ChannelStateData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ibc.lightclients.solomachine.v1.ChannelStateData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ibc.lightclients.solomachine.v1.ChannelStateData}
 */
proto.ibc.lightclients.solomachine.v1.ChannelStateData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPath(value);
      break;
    case 2:
      var value = new ibc_core_channel_v1_channel_pb.Channel;
      reader.readMessage(value,ibc_core_channel_v1_channel_pb.Channel.deserializeBinaryFromReader);
      msg.setChannel(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ibc.lightclients.solomachine.v1.ChannelStateData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ibc.lightclients.solomachine.v1.ChannelStateData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ibc.lightclients.solomachine.v1.ChannelStateData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.lightclients.solomachine.v1.ChannelStateData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPath_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getChannel();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      ibc_core_channel_v1_channel_pb.Channel.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes path = 1;
 * @return {!(string|Uint8Array)}
 */
proto.ibc.lightclients.solomachine.v1.ChannelStateData.prototype.getPath = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes path = 1;
 * This is a type-conversion wrapper around `getPath()`
 * @return {string}
 */
proto.ibc.lightclients.solomachine.v1.ChannelStateData.prototype.getPath_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPath()));
};


/**
 * optional bytes path = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPath()`
 * @return {!Uint8Array}
 */
proto.ibc.lightclients.solomachine.v1.ChannelStateData.prototype.getPath_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPath()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ibc.lightclients.solomachine.v1.ChannelStateData} returns this
 */
proto.ibc.lightclients.solomachine.v1.ChannelStateData.prototype.setPath = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional ibc.core.channel.v1.Channel channel = 2;
 * @return {?proto.ibc.core.channel.v1.Channel}
 */
proto.ibc.lightclients.solomachine.v1.ChannelStateData.prototype.getChannel = function() {
  return /** @type{?proto.ibc.core.channel.v1.Channel} */ (
    jspb.Message.getWrapperField(this, ibc_core_channel_v1_channel_pb.Channel, 2));
};


/**
 * @param {?proto.ibc.core.channel.v1.Channel|undefined} value
 * @return {!proto.ibc.lightclients.solomachine.v1.ChannelStateData} returns this
*/
proto.ibc.lightclients.solomachine.v1.ChannelStateData.prototype.setChannel = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ibc.lightclients.solomachine.v1.ChannelStateData} returns this
 */
proto.ibc.lightclients.solomachine.v1.ChannelStateData.prototype.clearChannel = function() {
  return this.setChannel(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ibc.lightclients.solomachine.v1.ChannelStateData.prototype.hasChannel = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ibc.lightclients.solomachine.v1.PacketCommitmentData.prototype.toObject = function(opt_includeInstance) {
  return proto.ibc.lightclients.solomachine.v1.PacketCommitmentData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ibc.lightclients.solomachine.v1.PacketCommitmentData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.lightclients.solomachine.v1.PacketCommitmentData.toObject = function(includeInstance, msg) {
  var f, obj = {
    path: msg.getPath_asB64(),
    commitment: msg.getCommitment_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ibc.lightclients.solomachine.v1.PacketCommitmentData}
 */
proto.ibc.lightclients.solomachine.v1.PacketCommitmentData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ibc.lightclients.solomachine.v1.PacketCommitmentData;
  return proto.ibc.lightclients.solomachine.v1.PacketCommitmentData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ibc.lightclients.solomachine.v1.PacketCommitmentData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ibc.lightclients.solomachine.v1.PacketCommitmentData}
 */
proto.ibc.lightclients.solomachine.v1.PacketCommitmentData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPath(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setCommitment(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ibc.lightclients.solomachine.v1.PacketCommitmentData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ibc.lightclients.solomachine.v1.PacketCommitmentData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ibc.lightclients.solomachine.v1.PacketCommitmentData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.lightclients.solomachine.v1.PacketCommitmentData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPath_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getCommitment_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes path = 1;
 * @return {!(string|Uint8Array)}
 */
proto.ibc.lightclients.solomachine.v1.PacketCommitmentData.prototype.getPath = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes path = 1;
 * This is a type-conversion wrapper around `getPath()`
 * @return {string}
 */
proto.ibc.lightclients.solomachine.v1.PacketCommitmentData.prototype.getPath_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPath()));
};


/**
 * optional bytes path = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPath()`
 * @return {!Uint8Array}
 */
proto.ibc.lightclients.solomachine.v1.PacketCommitmentData.prototype.getPath_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPath()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ibc.lightclients.solomachine.v1.PacketCommitmentData} returns this
 */
proto.ibc.lightclients.solomachine.v1.PacketCommitmentData.prototype.setPath = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes commitment = 2;
 * @return {!(string|Uint8Array)}
 */
proto.ibc.lightclients.solomachine.v1.PacketCommitmentData.prototype.getCommitment = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes commitment = 2;
 * This is a type-conversion wrapper around `getCommitment()`
 * @return {string}
 */
proto.ibc.lightclients.solomachine.v1.PacketCommitmentData.prototype.getCommitment_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getCommitment()));
};


/**
 * optional bytes commitment = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCommitment()`
 * @return {!Uint8Array}
 */
proto.ibc.lightclients.solomachine.v1.PacketCommitmentData.prototype.getCommitment_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getCommitment()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ibc.lightclients.solomachine.v1.PacketCommitmentData} returns this
 */
proto.ibc.lightclients.solomachine.v1.PacketCommitmentData.prototype.setCommitment = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ibc.lightclients.solomachine.v1.PacketAcknowledgementData.prototype.toObject = function(opt_includeInstance) {
  return proto.ibc.lightclients.solomachine.v1.PacketAcknowledgementData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ibc.lightclients.solomachine.v1.PacketAcknowledgementData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.lightclients.solomachine.v1.PacketAcknowledgementData.toObject = function(includeInstance, msg) {
  var f, obj = {
    path: msg.getPath_asB64(),
    acknowledgement: msg.getAcknowledgement_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ibc.lightclients.solomachine.v1.PacketAcknowledgementData}
 */
proto.ibc.lightclients.solomachine.v1.PacketAcknowledgementData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ibc.lightclients.solomachine.v1.PacketAcknowledgementData;
  return proto.ibc.lightclients.solomachine.v1.PacketAcknowledgementData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ibc.lightclients.solomachine.v1.PacketAcknowledgementData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ibc.lightclients.solomachine.v1.PacketAcknowledgementData}
 */
proto.ibc.lightclients.solomachine.v1.PacketAcknowledgementData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPath(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAcknowledgement(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ibc.lightclients.solomachine.v1.PacketAcknowledgementData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ibc.lightclients.solomachine.v1.PacketAcknowledgementData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ibc.lightclients.solomachine.v1.PacketAcknowledgementData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.lightclients.solomachine.v1.PacketAcknowledgementData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPath_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getAcknowledgement_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes path = 1;
 * @return {!(string|Uint8Array)}
 */
proto.ibc.lightclients.solomachine.v1.PacketAcknowledgementData.prototype.getPath = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes path = 1;
 * This is a type-conversion wrapper around `getPath()`
 * @return {string}
 */
proto.ibc.lightclients.solomachine.v1.PacketAcknowledgementData.prototype.getPath_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPath()));
};


/**
 * optional bytes path = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPath()`
 * @return {!Uint8Array}
 */
proto.ibc.lightclients.solomachine.v1.PacketAcknowledgementData.prototype.getPath_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPath()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ibc.lightclients.solomachine.v1.PacketAcknowledgementData} returns this
 */
proto.ibc.lightclients.solomachine.v1.PacketAcknowledgementData.prototype.setPath = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes acknowledgement = 2;
 * @return {!(string|Uint8Array)}
 */
proto.ibc.lightclients.solomachine.v1.PacketAcknowledgementData.prototype.getAcknowledgement = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes acknowledgement = 2;
 * This is a type-conversion wrapper around `getAcknowledgement()`
 * @return {string}
 */
proto.ibc.lightclients.solomachine.v1.PacketAcknowledgementData.prototype.getAcknowledgement_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAcknowledgement()));
};


/**
 * optional bytes acknowledgement = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAcknowledgement()`
 * @return {!Uint8Array}
 */
proto.ibc.lightclients.solomachine.v1.PacketAcknowledgementData.prototype.getAcknowledgement_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAcknowledgement()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ibc.lightclients.solomachine.v1.PacketAcknowledgementData} returns this
 */
proto.ibc.lightclients.solomachine.v1.PacketAcknowledgementData.prototype.setAcknowledgement = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ibc.lightclients.solomachine.v1.PacketReceiptAbsenceData.prototype.toObject = function(opt_includeInstance) {
  return proto.ibc.lightclients.solomachine.v1.PacketReceiptAbsenceData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ibc.lightclients.solomachine.v1.PacketReceiptAbsenceData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.lightclients.solomachine.v1.PacketReceiptAbsenceData.toObject = function(includeInstance, msg) {
  var f, obj = {
    path: msg.getPath_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ibc.lightclients.solomachine.v1.PacketReceiptAbsenceData}
 */
proto.ibc.lightclients.solomachine.v1.PacketReceiptAbsenceData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ibc.lightclients.solomachine.v1.PacketReceiptAbsenceData;
  return proto.ibc.lightclients.solomachine.v1.PacketReceiptAbsenceData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ibc.lightclients.solomachine.v1.PacketReceiptAbsenceData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ibc.lightclients.solomachine.v1.PacketReceiptAbsenceData}
 */
proto.ibc.lightclients.solomachine.v1.PacketReceiptAbsenceData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPath(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ibc.lightclients.solomachine.v1.PacketReceiptAbsenceData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ibc.lightclients.solomachine.v1.PacketReceiptAbsenceData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ibc.lightclients.solomachine.v1.PacketReceiptAbsenceData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.lightclients.solomachine.v1.PacketReceiptAbsenceData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPath_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes path = 1;
 * @return {!(string|Uint8Array)}
 */
proto.ibc.lightclients.solomachine.v1.PacketReceiptAbsenceData.prototype.getPath = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes path = 1;
 * This is a type-conversion wrapper around `getPath()`
 * @return {string}
 */
proto.ibc.lightclients.solomachine.v1.PacketReceiptAbsenceData.prototype.getPath_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPath()));
};


/**
 * optional bytes path = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPath()`
 * @return {!Uint8Array}
 */
proto.ibc.lightclients.solomachine.v1.PacketReceiptAbsenceData.prototype.getPath_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPath()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ibc.lightclients.solomachine.v1.PacketReceiptAbsenceData} returns this
 */
proto.ibc.lightclients.solomachine.v1.PacketReceiptAbsenceData.prototype.setPath = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ibc.lightclients.solomachine.v1.NextSequenceRecvData.prototype.toObject = function(opt_includeInstance) {
  return proto.ibc.lightclients.solomachine.v1.NextSequenceRecvData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ibc.lightclients.solomachine.v1.NextSequenceRecvData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.lightclients.solomachine.v1.NextSequenceRecvData.toObject = function(includeInstance, msg) {
  var f, obj = {
    path: msg.getPath_asB64(),
    nextSeqRecv: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ibc.lightclients.solomachine.v1.NextSequenceRecvData}
 */
proto.ibc.lightclients.solomachine.v1.NextSequenceRecvData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ibc.lightclients.solomachine.v1.NextSequenceRecvData;
  return proto.ibc.lightclients.solomachine.v1.NextSequenceRecvData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ibc.lightclients.solomachine.v1.NextSequenceRecvData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ibc.lightclients.solomachine.v1.NextSequenceRecvData}
 */
proto.ibc.lightclients.solomachine.v1.NextSequenceRecvData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPath(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNextSeqRecv(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ibc.lightclients.solomachine.v1.NextSequenceRecvData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ibc.lightclients.solomachine.v1.NextSequenceRecvData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ibc.lightclients.solomachine.v1.NextSequenceRecvData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.lightclients.solomachine.v1.NextSequenceRecvData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPath_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getNextSeqRecv();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional bytes path = 1;
 * @return {!(string|Uint8Array)}
 */
proto.ibc.lightclients.solomachine.v1.NextSequenceRecvData.prototype.getPath = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes path = 1;
 * This is a type-conversion wrapper around `getPath()`
 * @return {string}
 */
proto.ibc.lightclients.solomachine.v1.NextSequenceRecvData.prototype.getPath_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPath()));
};


/**
 * optional bytes path = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPath()`
 * @return {!Uint8Array}
 */
proto.ibc.lightclients.solomachine.v1.NextSequenceRecvData.prototype.getPath_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPath()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ibc.lightclients.solomachine.v1.NextSequenceRecvData} returns this
 */
proto.ibc.lightclients.solomachine.v1.NextSequenceRecvData.prototype.setPath = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional uint64 next_seq_recv = 2;
 * @return {number}
 */
proto.ibc.lightclients.solomachine.v1.NextSequenceRecvData.prototype.getNextSeqRecv = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ibc.lightclients.solomachine.v1.NextSequenceRecvData} returns this
 */
proto.ibc.lightclients.solomachine.v1.NextSequenceRecvData.prototype.setNextSeqRecv = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * @enum {number}
 */
proto.ibc.lightclients.solomachine.v1.DataType = {
  DATA_TYPE_UNINITIALIZED_UNSPECIFIED: 0,
  DATA_TYPE_CLIENT_STATE: 1,
  DATA_TYPE_CONSENSUS_STATE: 2,
  DATA_TYPE_CONNECTION_STATE: 3,
  DATA_TYPE_CHANNEL_STATE: 4,
  DATA_TYPE_PACKET_COMMITMENT: 5,
  DATA_TYPE_PACKET_ACKNOWLEDGEMENT: 6,
  DATA_TYPE_PACKET_RECEIPT_ABSENCE: 7,
  DATA_TYPE_NEXT_SEQUENCE_RECV: 8,
  DATA_TYPE_HEADER: 9
};

goog.object.extend(exports, proto.ibc.lightclients.solomachine.v1);
