// source: ibc/core/channel/v1/tx.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var gogoproto_gogo_pb = require('../../../../gogoproto/gogo_pb.js');
goog.object.extend(proto, gogoproto_gogo_pb);
var ibc_core_client_v1_client_pb = require('../../../../ibc/core/client/v1/client_pb.js');
goog.object.extend(proto, ibc_core_client_v1_client_pb);
var ibc_core_channel_v1_channel_pb = require('../../../../ibc/core/channel/v1/channel_pb.js');
goog.object.extend(proto, ibc_core_channel_v1_channel_pb);
goog.exportSymbol('proto.ibc.core.channel.v1.MsgAcknowledgement', null, global);
goog.exportSymbol('proto.ibc.core.channel.v1.MsgAcknowledgementResponse', null, global);
goog.exportSymbol('proto.ibc.core.channel.v1.MsgChannelCloseConfirm', null, global);
goog.exportSymbol('proto.ibc.core.channel.v1.MsgChannelCloseConfirmResponse', null, global);
goog.exportSymbol('proto.ibc.core.channel.v1.MsgChannelCloseInit', null, global);
goog.exportSymbol('proto.ibc.core.channel.v1.MsgChannelCloseInitResponse', null, global);
goog.exportSymbol('proto.ibc.core.channel.v1.MsgChannelOpenAck', null, global);
goog.exportSymbol('proto.ibc.core.channel.v1.MsgChannelOpenAckResponse', null, global);
goog.exportSymbol('proto.ibc.core.channel.v1.MsgChannelOpenConfirm', null, global);
goog.exportSymbol('proto.ibc.core.channel.v1.MsgChannelOpenConfirmResponse', null, global);
goog.exportSymbol('proto.ibc.core.channel.v1.MsgChannelOpenInit', null, global);
goog.exportSymbol('proto.ibc.core.channel.v1.MsgChannelOpenInitResponse', null, global);
goog.exportSymbol('proto.ibc.core.channel.v1.MsgChannelOpenTry', null, global);
goog.exportSymbol('proto.ibc.core.channel.v1.MsgChannelOpenTryResponse', null, global);
goog.exportSymbol('proto.ibc.core.channel.v1.MsgRecvPacket', null, global);
goog.exportSymbol('proto.ibc.core.channel.v1.MsgRecvPacketResponse', null, global);
goog.exportSymbol('proto.ibc.core.channel.v1.MsgTimeout', null, global);
goog.exportSymbol('proto.ibc.core.channel.v1.MsgTimeoutOnClose', null, global);
goog.exportSymbol('proto.ibc.core.channel.v1.MsgTimeoutOnCloseResponse', null, global);
goog.exportSymbol('proto.ibc.core.channel.v1.MsgTimeoutResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ibc.core.channel.v1.MsgChannelOpenInit = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ibc.core.channel.v1.MsgChannelOpenInit, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ibc.core.channel.v1.MsgChannelOpenInit.displayName = 'proto.ibc.core.channel.v1.MsgChannelOpenInit';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ibc.core.channel.v1.MsgChannelOpenInitResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ibc.core.channel.v1.MsgChannelOpenInitResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ibc.core.channel.v1.MsgChannelOpenInitResponse.displayName = 'proto.ibc.core.channel.v1.MsgChannelOpenInitResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ibc.core.channel.v1.MsgChannelOpenTry = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ibc.core.channel.v1.MsgChannelOpenTry, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ibc.core.channel.v1.MsgChannelOpenTry.displayName = 'proto.ibc.core.channel.v1.MsgChannelOpenTry';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ibc.core.channel.v1.MsgChannelOpenTryResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ibc.core.channel.v1.MsgChannelOpenTryResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ibc.core.channel.v1.MsgChannelOpenTryResponse.displayName = 'proto.ibc.core.channel.v1.MsgChannelOpenTryResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ibc.core.channel.v1.MsgChannelOpenAck = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ibc.core.channel.v1.MsgChannelOpenAck, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ibc.core.channel.v1.MsgChannelOpenAck.displayName = 'proto.ibc.core.channel.v1.MsgChannelOpenAck';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ibc.core.channel.v1.MsgChannelOpenAckResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ibc.core.channel.v1.MsgChannelOpenAckResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ibc.core.channel.v1.MsgChannelOpenAckResponse.displayName = 'proto.ibc.core.channel.v1.MsgChannelOpenAckResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ibc.core.channel.v1.MsgChannelOpenConfirm = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ibc.core.channel.v1.MsgChannelOpenConfirm, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ibc.core.channel.v1.MsgChannelOpenConfirm.displayName = 'proto.ibc.core.channel.v1.MsgChannelOpenConfirm';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ibc.core.channel.v1.MsgChannelOpenConfirmResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ibc.core.channel.v1.MsgChannelOpenConfirmResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ibc.core.channel.v1.MsgChannelOpenConfirmResponse.displayName = 'proto.ibc.core.channel.v1.MsgChannelOpenConfirmResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ibc.core.channel.v1.MsgChannelCloseInit = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ibc.core.channel.v1.MsgChannelCloseInit, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ibc.core.channel.v1.MsgChannelCloseInit.displayName = 'proto.ibc.core.channel.v1.MsgChannelCloseInit';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ibc.core.channel.v1.MsgChannelCloseInitResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ibc.core.channel.v1.MsgChannelCloseInitResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ibc.core.channel.v1.MsgChannelCloseInitResponse.displayName = 'proto.ibc.core.channel.v1.MsgChannelCloseInitResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ibc.core.channel.v1.MsgChannelCloseConfirm = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ibc.core.channel.v1.MsgChannelCloseConfirm, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ibc.core.channel.v1.MsgChannelCloseConfirm.displayName = 'proto.ibc.core.channel.v1.MsgChannelCloseConfirm';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ibc.core.channel.v1.MsgChannelCloseConfirmResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ibc.core.channel.v1.MsgChannelCloseConfirmResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ibc.core.channel.v1.MsgChannelCloseConfirmResponse.displayName = 'proto.ibc.core.channel.v1.MsgChannelCloseConfirmResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ibc.core.channel.v1.MsgRecvPacket = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ibc.core.channel.v1.MsgRecvPacket, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ibc.core.channel.v1.MsgRecvPacket.displayName = 'proto.ibc.core.channel.v1.MsgRecvPacket';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ibc.core.channel.v1.MsgRecvPacketResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ibc.core.channel.v1.MsgRecvPacketResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ibc.core.channel.v1.MsgRecvPacketResponse.displayName = 'proto.ibc.core.channel.v1.MsgRecvPacketResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ibc.core.channel.v1.MsgTimeout = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ibc.core.channel.v1.MsgTimeout, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ibc.core.channel.v1.MsgTimeout.displayName = 'proto.ibc.core.channel.v1.MsgTimeout';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ibc.core.channel.v1.MsgTimeoutResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ibc.core.channel.v1.MsgTimeoutResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ibc.core.channel.v1.MsgTimeoutResponse.displayName = 'proto.ibc.core.channel.v1.MsgTimeoutResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ibc.core.channel.v1.MsgTimeoutOnClose = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ibc.core.channel.v1.MsgTimeoutOnClose, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ibc.core.channel.v1.MsgTimeoutOnClose.displayName = 'proto.ibc.core.channel.v1.MsgTimeoutOnClose';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ibc.core.channel.v1.MsgTimeoutOnCloseResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ibc.core.channel.v1.MsgTimeoutOnCloseResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ibc.core.channel.v1.MsgTimeoutOnCloseResponse.displayName = 'proto.ibc.core.channel.v1.MsgTimeoutOnCloseResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ibc.core.channel.v1.MsgAcknowledgement = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ibc.core.channel.v1.MsgAcknowledgement, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ibc.core.channel.v1.MsgAcknowledgement.displayName = 'proto.ibc.core.channel.v1.MsgAcknowledgement';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ibc.core.channel.v1.MsgAcknowledgementResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ibc.core.channel.v1.MsgAcknowledgementResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ibc.core.channel.v1.MsgAcknowledgementResponse.displayName = 'proto.ibc.core.channel.v1.MsgAcknowledgementResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ibc.core.channel.v1.MsgChannelOpenInit.prototype.toObject = function(opt_includeInstance) {
  return proto.ibc.core.channel.v1.MsgChannelOpenInit.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ibc.core.channel.v1.MsgChannelOpenInit} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.core.channel.v1.MsgChannelOpenInit.toObject = function(includeInstance, msg) {
  var f, obj = {
    portId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    channel: (f = msg.getChannel()) && ibc_core_channel_v1_channel_pb.Channel.toObject(includeInstance, f),
    signer: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ibc.core.channel.v1.MsgChannelOpenInit}
 */
proto.ibc.core.channel.v1.MsgChannelOpenInit.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ibc.core.channel.v1.MsgChannelOpenInit;
  return proto.ibc.core.channel.v1.MsgChannelOpenInit.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ibc.core.channel.v1.MsgChannelOpenInit} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ibc.core.channel.v1.MsgChannelOpenInit}
 */
proto.ibc.core.channel.v1.MsgChannelOpenInit.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPortId(value);
      break;
    case 2:
      var value = new ibc_core_channel_v1_channel_pb.Channel;
      reader.readMessage(value,ibc_core_channel_v1_channel_pb.Channel.deserializeBinaryFromReader);
      msg.setChannel(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSigner(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ibc.core.channel.v1.MsgChannelOpenInit.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ibc.core.channel.v1.MsgChannelOpenInit.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ibc.core.channel.v1.MsgChannelOpenInit} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.core.channel.v1.MsgChannelOpenInit.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPortId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getChannel();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      ibc_core_channel_v1_channel_pb.Channel.serializeBinaryToWriter
    );
  }
  f = message.getSigner();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string port_id = 1;
 * @return {string}
 */
proto.ibc.core.channel.v1.MsgChannelOpenInit.prototype.getPortId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ibc.core.channel.v1.MsgChannelOpenInit} returns this
 */
proto.ibc.core.channel.v1.MsgChannelOpenInit.prototype.setPortId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Channel channel = 2;
 * @return {?proto.ibc.core.channel.v1.Channel}
 */
proto.ibc.core.channel.v1.MsgChannelOpenInit.prototype.getChannel = function() {
  return /** @type{?proto.ibc.core.channel.v1.Channel} */ (
    jspb.Message.getWrapperField(this, ibc_core_channel_v1_channel_pb.Channel, 2));
};


/**
 * @param {?proto.ibc.core.channel.v1.Channel|undefined} value
 * @return {!proto.ibc.core.channel.v1.MsgChannelOpenInit} returns this
*/
proto.ibc.core.channel.v1.MsgChannelOpenInit.prototype.setChannel = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ibc.core.channel.v1.MsgChannelOpenInit} returns this
 */
proto.ibc.core.channel.v1.MsgChannelOpenInit.prototype.clearChannel = function() {
  return this.setChannel(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ibc.core.channel.v1.MsgChannelOpenInit.prototype.hasChannel = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string signer = 3;
 * @return {string}
 */
proto.ibc.core.channel.v1.MsgChannelOpenInit.prototype.getSigner = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ibc.core.channel.v1.MsgChannelOpenInit} returns this
 */
proto.ibc.core.channel.v1.MsgChannelOpenInit.prototype.setSigner = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ibc.core.channel.v1.MsgChannelOpenInitResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ibc.core.channel.v1.MsgChannelOpenInitResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ibc.core.channel.v1.MsgChannelOpenInitResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.core.channel.v1.MsgChannelOpenInitResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ibc.core.channel.v1.MsgChannelOpenInitResponse}
 */
proto.ibc.core.channel.v1.MsgChannelOpenInitResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ibc.core.channel.v1.MsgChannelOpenInitResponse;
  return proto.ibc.core.channel.v1.MsgChannelOpenInitResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ibc.core.channel.v1.MsgChannelOpenInitResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ibc.core.channel.v1.MsgChannelOpenInitResponse}
 */
proto.ibc.core.channel.v1.MsgChannelOpenInitResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ibc.core.channel.v1.MsgChannelOpenInitResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ibc.core.channel.v1.MsgChannelOpenInitResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ibc.core.channel.v1.MsgChannelOpenInitResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.core.channel.v1.MsgChannelOpenInitResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ibc.core.channel.v1.MsgChannelOpenTry.prototype.toObject = function(opt_includeInstance) {
  return proto.ibc.core.channel.v1.MsgChannelOpenTry.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ibc.core.channel.v1.MsgChannelOpenTry} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.core.channel.v1.MsgChannelOpenTry.toObject = function(includeInstance, msg) {
  var f, obj = {
    portId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    previousChannelId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    channel: (f = msg.getChannel()) && ibc_core_channel_v1_channel_pb.Channel.toObject(includeInstance, f),
    counterpartyVersion: jspb.Message.getFieldWithDefault(msg, 4, ""),
    proofInit: msg.getProofInit_asB64(),
    proofHeight: (f = msg.getProofHeight()) && ibc_core_client_v1_client_pb.Height.toObject(includeInstance, f),
    signer: jspb.Message.getFieldWithDefault(msg, 7, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ibc.core.channel.v1.MsgChannelOpenTry}
 */
proto.ibc.core.channel.v1.MsgChannelOpenTry.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ibc.core.channel.v1.MsgChannelOpenTry;
  return proto.ibc.core.channel.v1.MsgChannelOpenTry.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ibc.core.channel.v1.MsgChannelOpenTry} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ibc.core.channel.v1.MsgChannelOpenTry}
 */
proto.ibc.core.channel.v1.MsgChannelOpenTry.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPortId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPreviousChannelId(value);
      break;
    case 3:
      var value = new ibc_core_channel_v1_channel_pb.Channel;
      reader.readMessage(value,ibc_core_channel_v1_channel_pb.Channel.deserializeBinaryFromReader);
      msg.setChannel(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setCounterpartyVersion(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setProofInit(value);
      break;
    case 6:
      var value = new ibc_core_client_v1_client_pb.Height;
      reader.readMessage(value,ibc_core_client_v1_client_pb.Height.deserializeBinaryFromReader);
      msg.setProofHeight(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setSigner(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ibc.core.channel.v1.MsgChannelOpenTry.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ibc.core.channel.v1.MsgChannelOpenTry.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ibc.core.channel.v1.MsgChannelOpenTry} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.core.channel.v1.MsgChannelOpenTry.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPortId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPreviousChannelId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getChannel();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      ibc_core_channel_v1_channel_pb.Channel.serializeBinaryToWriter
    );
  }
  f = message.getCounterpartyVersion();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getProofInit_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getProofHeight();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      ibc_core_client_v1_client_pb.Height.serializeBinaryToWriter
    );
  }
  f = message.getSigner();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * optional string port_id = 1;
 * @return {string}
 */
proto.ibc.core.channel.v1.MsgChannelOpenTry.prototype.getPortId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ibc.core.channel.v1.MsgChannelOpenTry} returns this
 */
proto.ibc.core.channel.v1.MsgChannelOpenTry.prototype.setPortId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string previous_channel_id = 2;
 * @return {string}
 */
proto.ibc.core.channel.v1.MsgChannelOpenTry.prototype.getPreviousChannelId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ibc.core.channel.v1.MsgChannelOpenTry} returns this
 */
proto.ibc.core.channel.v1.MsgChannelOpenTry.prototype.setPreviousChannelId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Channel channel = 3;
 * @return {?proto.ibc.core.channel.v1.Channel}
 */
proto.ibc.core.channel.v1.MsgChannelOpenTry.prototype.getChannel = function() {
  return /** @type{?proto.ibc.core.channel.v1.Channel} */ (
    jspb.Message.getWrapperField(this, ibc_core_channel_v1_channel_pb.Channel, 3));
};


/**
 * @param {?proto.ibc.core.channel.v1.Channel|undefined} value
 * @return {!proto.ibc.core.channel.v1.MsgChannelOpenTry} returns this
*/
proto.ibc.core.channel.v1.MsgChannelOpenTry.prototype.setChannel = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ibc.core.channel.v1.MsgChannelOpenTry} returns this
 */
proto.ibc.core.channel.v1.MsgChannelOpenTry.prototype.clearChannel = function() {
  return this.setChannel(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ibc.core.channel.v1.MsgChannelOpenTry.prototype.hasChannel = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string counterparty_version = 4;
 * @return {string}
 */
proto.ibc.core.channel.v1.MsgChannelOpenTry.prototype.getCounterpartyVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.ibc.core.channel.v1.MsgChannelOpenTry} returns this
 */
proto.ibc.core.channel.v1.MsgChannelOpenTry.prototype.setCounterpartyVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional bytes proof_init = 5;
 * @return {!(string|Uint8Array)}
 */
proto.ibc.core.channel.v1.MsgChannelOpenTry.prototype.getProofInit = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes proof_init = 5;
 * This is a type-conversion wrapper around `getProofInit()`
 * @return {string}
 */
proto.ibc.core.channel.v1.MsgChannelOpenTry.prototype.getProofInit_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getProofInit()));
};


/**
 * optional bytes proof_init = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getProofInit()`
 * @return {!Uint8Array}
 */
proto.ibc.core.channel.v1.MsgChannelOpenTry.prototype.getProofInit_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getProofInit()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ibc.core.channel.v1.MsgChannelOpenTry} returns this
 */
proto.ibc.core.channel.v1.MsgChannelOpenTry.prototype.setProofInit = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};


/**
 * optional ibc.core.client.v1.Height proof_height = 6;
 * @return {?proto.ibc.core.client.v1.Height}
 */
proto.ibc.core.channel.v1.MsgChannelOpenTry.prototype.getProofHeight = function() {
  return /** @type{?proto.ibc.core.client.v1.Height} */ (
    jspb.Message.getWrapperField(this, ibc_core_client_v1_client_pb.Height, 6));
};


/**
 * @param {?proto.ibc.core.client.v1.Height|undefined} value
 * @return {!proto.ibc.core.channel.v1.MsgChannelOpenTry} returns this
*/
proto.ibc.core.channel.v1.MsgChannelOpenTry.prototype.setProofHeight = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ibc.core.channel.v1.MsgChannelOpenTry} returns this
 */
proto.ibc.core.channel.v1.MsgChannelOpenTry.prototype.clearProofHeight = function() {
  return this.setProofHeight(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ibc.core.channel.v1.MsgChannelOpenTry.prototype.hasProofHeight = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string signer = 7;
 * @return {string}
 */
proto.ibc.core.channel.v1.MsgChannelOpenTry.prototype.getSigner = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.ibc.core.channel.v1.MsgChannelOpenTry} returns this
 */
proto.ibc.core.channel.v1.MsgChannelOpenTry.prototype.setSigner = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ibc.core.channel.v1.MsgChannelOpenTryResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ibc.core.channel.v1.MsgChannelOpenTryResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ibc.core.channel.v1.MsgChannelOpenTryResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.core.channel.v1.MsgChannelOpenTryResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ibc.core.channel.v1.MsgChannelOpenTryResponse}
 */
proto.ibc.core.channel.v1.MsgChannelOpenTryResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ibc.core.channel.v1.MsgChannelOpenTryResponse;
  return proto.ibc.core.channel.v1.MsgChannelOpenTryResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ibc.core.channel.v1.MsgChannelOpenTryResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ibc.core.channel.v1.MsgChannelOpenTryResponse}
 */
proto.ibc.core.channel.v1.MsgChannelOpenTryResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ibc.core.channel.v1.MsgChannelOpenTryResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ibc.core.channel.v1.MsgChannelOpenTryResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ibc.core.channel.v1.MsgChannelOpenTryResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.core.channel.v1.MsgChannelOpenTryResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ibc.core.channel.v1.MsgChannelOpenAck.prototype.toObject = function(opt_includeInstance) {
  return proto.ibc.core.channel.v1.MsgChannelOpenAck.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ibc.core.channel.v1.MsgChannelOpenAck} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.core.channel.v1.MsgChannelOpenAck.toObject = function(includeInstance, msg) {
  var f, obj = {
    portId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    channelId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    counterpartyChannelId: jspb.Message.getFieldWithDefault(msg, 3, ""),
    counterpartyVersion: jspb.Message.getFieldWithDefault(msg, 4, ""),
    proofTry: msg.getProofTry_asB64(),
    proofHeight: (f = msg.getProofHeight()) && ibc_core_client_v1_client_pb.Height.toObject(includeInstance, f),
    signer: jspb.Message.getFieldWithDefault(msg, 7, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ibc.core.channel.v1.MsgChannelOpenAck}
 */
proto.ibc.core.channel.v1.MsgChannelOpenAck.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ibc.core.channel.v1.MsgChannelOpenAck;
  return proto.ibc.core.channel.v1.MsgChannelOpenAck.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ibc.core.channel.v1.MsgChannelOpenAck} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ibc.core.channel.v1.MsgChannelOpenAck}
 */
proto.ibc.core.channel.v1.MsgChannelOpenAck.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPortId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setChannelId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCounterpartyChannelId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setCounterpartyVersion(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setProofTry(value);
      break;
    case 6:
      var value = new ibc_core_client_v1_client_pb.Height;
      reader.readMessage(value,ibc_core_client_v1_client_pb.Height.deserializeBinaryFromReader);
      msg.setProofHeight(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setSigner(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ibc.core.channel.v1.MsgChannelOpenAck.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ibc.core.channel.v1.MsgChannelOpenAck.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ibc.core.channel.v1.MsgChannelOpenAck} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.core.channel.v1.MsgChannelOpenAck.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPortId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getChannelId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCounterpartyChannelId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getCounterpartyVersion();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getProofTry_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getProofHeight();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      ibc_core_client_v1_client_pb.Height.serializeBinaryToWriter
    );
  }
  f = message.getSigner();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * optional string port_id = 1;
 * @return {string}
 */
proto.ibc.core.channel.v1.MsgChannelOpenAck.prototype.getPortId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ibc.core.channel.v1.MsgChannelOpenAck} returns this
 */
proto.ibc.core.channel.v1.MsgChannelOpenAck.prototype.setPortId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string channel_id = 2;
 * @return {string}
 */
proto.ibc.core.channel.v1.MsgChannelOpenAck.prototype.getChannelId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ibc.core.channel.v1.MsgChannelOpenAck} returns this
 */
proto.ibc.core.channel.v1.MsgChannelOpenAck.prototype.setChannelId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string counterparty_channel_id = 3;
 * @return {string}
 */
proto.ibc.core.channel.v1.MsgChannelOpenAck.prototype.getCounterpartyChannelId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ibc.core.channel.v1.MsgChannelOpenAck} returns this
 */
proto.ibc.core.channel.v1.MsgChannelOpenAck.prototype.setCounterpartyChannelId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string counterparty_version = 4;
 * @return {string}
 */
proto.ibc.core.channel.v1.MsgChannelOpenAck.prototype.getCounterpartyVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.ibc.core.channel.v1.MsgChannelOpenAck} returns this
 */
proto.ibc.core.channel.v1.MsgChannelOpenAck.prototype.setCounterpartyVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional bytes proof_try = 5;
 * @return {!(string|Uint8Array)}
 */
proto.ibc.core.channel.v1.MsgChannelOpenAck.prototype.getProofTry = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes proof_try = 5;
 * This is a type-conversion wrapper around `getProofTry()`
 * @return {string}
 */
proto.ibc.core.channel.v1.MsgChannelOpenAck.prototype.getProofTry_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getProofTry()));
};


/**
 * optional bytes proof_try = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getProofTry()`
 * @return {!Uint8Array}
 */
proto.ibc.core.channel.v1.MsgChannelOpenAck.prototype.getProofTry_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getProofTry()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ibc.core.channel.v1.MsgChannelOpenAck} returns this
 */
proto.ibc.core.channel.v1.MsgChannelOpenAck.prototype.setProofTry = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};


/**
 * optional ibc.core.client.v1.Height proof_height = 6;
 * @return {?proto.ibc.core.client.v1.Height}
 */
proto.ibc.core.channel.v1.MsgChannelOpenAck.prototype.getProofHeight = function() {
  return /** @type{?proto.ibc.core.client.v1.Height} */ (
    jspb.Message.getWrapperField(this, ibc_core_client_v1_client_pb.Height, 6));
};


/**
 * @param {?proto.ibc.core.client.v1.Height|undefined} value
 * @return {!proto.ibc.core.channel.v1.MsgChannelOpenAck} returns this
*/
proto.ibc.core.channel.v1.MsgChannelOpenAck.prototype.setProofHeight = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ibc.core.channel.v1.MsgChannelOpenAck} returns this
 */
proto.ibc.core.channel.v1.MsgChannelOpenAck.prototype.clearProofHeight = function() {
  return this.setProofHeight(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ibc.core.channel.v1.MsgChannelOpenAck.prototype.hasProofHeight = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string signer = 7;
 * @return {string}
 */
proto.ibc.core.channel.v1.MsgChannelOpenAck.prototype.getSigner = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.ibc.core.channel.v1.MsgChannelOpenAck} returns this
 */
proto.ibc.core.channel.v1.MsgChannelOpenAck.prototype.setSigner = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ibc.core.channel.v1.MsgChannelOpenAckResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ibc.core.channel.v1.MsgChannelOpenAckResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ibc.core.channel.v1.MsgChannelOpenAckResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.core.channel.v1.MsgChannelOpenAckResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ibc.core.channel.v1.MsgChannelOpenAckResponse}
 */
proto.ibc.core.channel.v1.MsgChannelOpenAckResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ibc.core.channel.v1.MsgChannelOpenAckResponse;
  return proto.ibc.core.channel.v1.MsgChannelOpenAckResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ibc.core.channel.v1.MsgChannelOpenAckResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ibc.core.channel.v1.MsgChannelOpenAckResponse}
 */
proto.ibc.core.channel.v1.MsgChannelOpenAckResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ibc.core.channel.v1.MsgChannelOpenAckResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ibc.core.channel.v1.MsgChannelOpenAckResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ibc.core.channel.v1.MsgChannelOpenAckResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.core.channel.v1.MsgChannelOpenAckResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ibc.core.channel.v1.MsgChannelOpenConfirm.prototype.toObject = function(opt_includeInstance) {
  return proto.ibc.core.channel.v1.MsgChannelOpenConfirm.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ibc.core.channel.v1.MsgChannelOpenConfirm} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.core.channel.v1.MsgChannelOpenConfirm.toObject = function(includeInstance, msg) {
  var f, obj = {
    portId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    channelId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    proofAck: msg.getProofAck_asB64(),
    proofHeight: (f = msg.getProofHeight()) && ibc_core_client_v1_client_pb.Height.toObject(includeInstance, f),
    signer: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ibc.core.channel.v1.MsgChannelOpenConfirm}
 */
proto.ibc.core.channel.v1.MsgChannelOpenConfirm.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ibc.core.channel.v1.MsgChannelOpenConfirm;
  return proto.ibc.core.channel.v1.MsgChannelOpenConfirm.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ibc.core.channel.v1.MsgChannelOpenConfirm} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ibc.core.channel.v1.MsgChannelOpenConfirm}
 */
proto.ibc.core.channel.v1.MsgChannelOpenConfirm.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPortId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setChannelId(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setProofAck(value);
      break;
    case 4:
      var value = new ibc_core_client_v1_client_pb.Height;
      reader.readMessage(value,ibc_core_client_v1_client_pb.Height.deserializeBinaryFromReader);
      msg.setProofHeight(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setSigner(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ibc.core.channel.v1.MsgChannelOpenConfirm.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ibc.core.channel.v1.MsgChannelOpenConfirm.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ibc.core.channel.v1.MsgChannelOpenConfirm} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.core.channel.v1.MsgChannelOpenConfirm.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPortId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getChannelId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getProofAck_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getProofHeight();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      ibc_core_client_v1_client_pb.Height.serializeBinaryToWriter
    );
  }
  f = message.getSigner();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string port_id = 1;
 * @return {string}
 */
proto.ibc.core.channel.v1.MsgChannelOpenConfirm.prototype.getPortId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ibc.core.channel.v1.MsgChannelOpenConfirm} returns this
 */
proto.ibc.core.channel.v1.MsgChannelOpenConfirm.prototype.setPortId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string channel_id = 2;
 * @return {string}
 */
proto.ibc.core.channel.v1.MsgChannelOpenConfirm.prototype.getChannelId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ibc.core.channel.v1.MsgChannelOpenConfirm} returns this
 */
proto.ibc.core.channel.v1.MsgChannelOpenConfirm.prototype.setChannelId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bytes proof_ack = 3;
 * @return {!(string|Uint8Array)}
 */
proto.ibc.core.channel.v1.MsgChannelOpenConfirm.prototype.getProofAck = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes proof_ack = 3;
 * This is a type-conversion wrapper around `getProofAck()`
 * @return {string}
 */
proto.ibc.core.channel.v1.MsgChannelOpenConfirm.prototype.getProofAck_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getProofAck()));
};


/**
 * optional bytes proof_ack = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getProofAck()`
 * @return {!Uint8Array}
 */
proto.ibc.core.channel.v1.MsgChannelOpenConfirm.prototype.getProofAck_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getProofAck()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ibc.core.channel.v1.MsgChannelOpenConfirm} returns this
 */
proto.ibc.core.channel.v1.MsgChannelOpenConfirm.prototype.setProofAck = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional ibc.core.client.v1.Height proof_height = 4;
 * @return {?proto.ibc.core.client.v1.Height}
 */
proto.ibc.core.channel.v1.MsgChannelOpenConfirm.prototype.getProofHeight = function() {
  return /** @type{?proto.ibc.core.client.v1.Height} */ (
    jspb.Message.getWrapperField(this, ibc_core_client_v1_client_pb.Height, 4));
};


/**
 * @param {?proto.ibc.core.client.v1.Height|undefined} value
 * @return {!proto.ibc.core.channel.v1.MsgChannelOpenConfirm} returns this
*/
proto.ibc.core.channel.v1.MsgChannelOpenConfirm.prototype.setProofHeight = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ibc.core.channel.v1.MsgChannelOpenConfirm} returns this
 */
proto.ibc.core.channel.v1.MsgChannelOpenConfirm.prototype.clearProofHeight = function() {
  return this.setProofHeight(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ibc.core.channel.v1.MsgChannelOpenConfirm.prototype.hasProofHeight = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string signer = 5;
 * @return {string}
 */
proto.ibc.core.channel.v1.MsgChannelOpenConfirm.prototype.getSigner = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.ibc.core.channel.v1.MsgChannelOpenConfirm} returns this
 */
proto.ibc.core.channel.v1.MsgChannelOpenConfirm.prototype.setSigner = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ibc.core.channel.v1.MsgChannelOpenConfirmResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ibc.core.channel.v1.MsgChannelOpenConfirmResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ibc.core.channel.v1.MsgChannelOpenConfirmResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.core.channel.v1.MsgChannelOpenConfirmResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ibc.core.channel.v1.MsgChannelOpenConfirmResponse}
 */
proto.ibc.core.channel.v1.MsgChannelOpenConfirmResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ibc.core.channel.v1.MsgChannelOpenConfirmResponse;
  return proto.ibc.core.channel.v1.MsgChannelOpenConfirmResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ibc.core.channel.v1.MsgChannelOpenConfirmResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ibc.core.channel.v1.MsgChannelOpenConfirmResponse}
 */
proto.ibc.core.channel.v1.MsgChannelOpenConfirmResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ibc.core.channel.v1.MsgChannelOpenConfirmResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ibc.core.channel.v1.MsgChannelOpenConfirmResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ibc.core.channel.v1.MsgChannelOpenConfirmResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.core.channel.v1.MsgChannelOpenConfirmResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ibc.core.channel.v1.MsgChannelCloseInit.prototype.toObject = function(opt_includeInstance) {
  return proto.ibc.core.channel.v1.MsgChannelCloseInit.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ibc.core.channel.v1.MsgChannelCloseInit} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.core.channel.v1.MsgChannelCloseInit.toObject = function(includeInstance, msg) {
  var f, obj = {
    portId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    channelId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    signer: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ibc.core.channel.v1.MsgChannelCloseInit}
 */
proto.ibc.core.channel.v1.MsgChannelCloseInit.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ibc.core.channel.v1.MsgChannelCloseInit;
  return proto.ibc.core.channel.v1.MsgChannelCloseInit.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ibc.core.channel.v1.MsgChannelCloseInit} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ibc.core.channel.v1.MsgChannelCloseInit}
 */
proto.ibc.core.channel.v1.MsgChannelCloseInit.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPortId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setChannelId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSigner(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ibc.core.channel.v1.MsgChannelCloseInit.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ibc.core.channel.v1.MsgChannelCloseInit.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ibc.core.channel.v1.MsgChannelCloseInit} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.core.channel.v1.MsgChannelCloseInit.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPortId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getChannelId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSigner();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string port_id = 1;
 * @return {string}
 */
proto.ibc.core.channel.v1.MsgChannelCloseInit.prototype.getPortId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ibc.core.channel.v1.MsgChannelCloseInit} returns this
 */
proto.ibc.core.channel.v1.MsgChannelCloseInit.prototype.setPortId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string channel_id = 2;
 * @return {string}
 */
proto.ibc.core.channel.v1.MsgChannelCloseInit.prototype.getChannelId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ibc.core.channel.v1.MsgChannelCloseInit} returns this
 */
proto.ibc.core.channel.v1.MsgChannelCloseInit.prototype.setChannelId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string signer = 3;
 * @return {string}
 */
proto.ibc.core.channel.v1.MsgChannelCloseInit.prototype.getSigner = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ibc.core.channel.v1.MsgChannelCloseInit} returns this
 */
proto.ibc.core.channel.v1.MsgChannelCloseInit.prototype.setSigner = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ibc.core.channel.v1.MsgChannelCloseInitResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ibc.core.channel.v1.MsgChannelCloseInitResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ibc.core.channel.v1.MsgChannelCloseInitResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.core.channel.v1.MsgChannelCloseInitResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ibc.core.channel.v1.MsgChannelCloseInitResponse}
 */
proto.ibc.core.channel.v1.MsgChannelCloseInitResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ibc.core.channel.v1.MsgChannelCloseInitResponse;
  return proto.ibc.core.channel.v1.MsgChannelCloseInitResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ibc.core.channel.v1.MsgChannelCloseInitResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ibc.core.channel.v1.MsgChannelCloseInitResponse}
 */
proto.ibc.core.channel.v1.MsgChannelCloseInitResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ibc.core.channel.v1.MsgChannelCloseInitResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ibc.core.channel.v1.MsgChannelCloseInitResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ibc.core.channel.v1.MsgChannelCloseInitResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.core.channel.v1.MsgChannelCloseInitResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ibc.core.channel.v1.MsgChannelCloseConfirm.prototype.toObject = function(opt_includeInstance) {
  return proto.ibc.core.channel.v1.MsgChannelCloseConfirm.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ibc.core.channel.v1.MsgChannelCloseConfirm} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.core.channel.v1.MsgChannelCloseConfirm.toObject = function(includeInstance, msg) {
  var f, obj = {
    portId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    channelId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    proofInit: msg.getProofInit_asB64(),
    proofHeight: (f = msg.getProofHeight()) && ibc_core_client_v1_client_pb.Height.toObject(includeInstance, f),
    signer: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ibc.core.channel.v1.MsgChannelCloseConfirm}
 */
proto.ibc.core.channel.v1.MsgChannelCloseConfirm.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ibc.core.channel.v1.MsgChannelCloseConfirm;
  return proto.ibc.core.channel.v1.MsgChannelCloseConfirm.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ibc.core.channel.v1.MsgChannelCloseConfirm} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ibc.core.channel.v1.MsgChannelCloseConfirm}
 */
proto.ibc.core.channel.v1.MsgChannelCloseConfirm.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPortId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setChannelId(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setProofInit(value);
      break;
    case 4:
      var value = new ibc_core_client_v1_client_pb.Height;
      reader.readMessage(value,ibc_core_client_v1_client_pb.Height.deserializeBinaryFromReader);
      msg.setProofHeight(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setSigner(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ibc.core.channel.v1.MsgChannelCloseConfirm.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ibc.core.channel.v1.MsgChannelCloseConfirm.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ibc.core.channel.v1.MsgChannelCloseConfirm} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.core.channel.v1.MsgChannelCloseConfirm.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPortId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getChannelId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getProofInit_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getProofHeight();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      ibc_core_client_v1_client_pb.Height.serializeBinaryToWriter
    );
  }
  f = message.getSigner();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string port_id = 1;
 * @return {string}
 */
proto.ibc.core.channel.v1.MsgChannelCloseConfirm.prototype.getPortId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ibc.core.channel.v1.MsgChannelCloseConfirm} returns this
 */
proto.ibc.core.channel.v1.MsgChannelCloseConfirm.prototype.setPortId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string channel_id = 2;
 * @return {string}
 */
proto.ibc.core.channel.v1.MsgChannelCloseConfirm.prototype.getChannelId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ibc.core.channel.v1.MsgChannelCloseConfirm} returns this
 */
proto.ibc.core.channel.v1.MsgChannelCloseConfirm.prototype.setChannelId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bytes proof_init = 3;
 * @return {!(string|Uint8Array)}
 */
proto.ibc.core.channel.v1.MsgChannelCloseConfirm.prototype.getProofInit = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes proof_init = 3;
 * This is a type-conversion wrapper around `getProofInit()`
 * @return {string}
 */
proto.ibc.core.channel.v1.MsgChannelCloseConfirm.prototype.getProofInit_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getProofInit()));
};


/**
 * optional bytes proof_init = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getProofInit()`
 * @return {!Uint8Array}
 */
proto.ibc.core.channel.v1.MsgChannelCloseConfirm.prototype.getProofInit_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getProofInit()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ibc.core.channel.v1.MsgChannelCloseConfirm} returns this
 */
proto.ibc.core.channel.v1.MsgChannelCloseConfirm.prototype.setProofInit = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional ibc.core.client.v1.Height proof_height = 4;
 * @return {?proto.ibc.core.client.v1.Height}
 */
proto.ibc.core.channel.v1.MsgChannelCloseConfirm.prototype.getProofHeight = function() {
  return /** @type{?proto.ibc.core.client.v1.Height} */ (
    jspb.Message.getWrapperField(this, ibc_core_client_v1_client_pb.Height, 4));
};


/**
 * @param {?proto.ibc.core.client.v1.Height|undefined} value
 * @return {!proto.ibc.core.channel.v1.MsgChannelCloseConfirm} returns this
*/
proto.ibc.core.channel.v1.MsgChannelCloseConfirm.prototype.setProofHeight = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ibc.core.channel.v1.MsgChannelCloseConfirm} returns this
 */
proto.ibc.core.channel.v1.MsgChannelCloseConfirm.prototype.clearProofHeight = function() {
  return this.setProofHeight(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ibc.core.channel.v1.MsgChannelCloseConfirm.prototype.hasProofHeight = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string signer = 5;
 * @return {string}
 */
proto.ibc.core.channel.v1.MsgChannelCloseConfirm.prototype.getSigner = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.ibc.core.channel.v1.MsgChannelCloseConfirm} returns this
 */
proto.ibc.core.channel.v1.MsgChannelCloseConfirm.prototype.setSigner = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ibc.core.channel.v1.MsgChannelCloseConfirmResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ibc.core.channel.v1.MsgChannelCloseConfirmResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ibc.core.channel.v1.MsgChannelCloseConfirmResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.core.channel.v1.MsgChannelCloseConfirmResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ibc.core.channel.v1.MsgChannelCloseConfirmResponse}
 */
proto.ibc.core.channel.v1.MsgChannelCloseConfirmResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ibc.core.channel.v1.MsgChannelCloseConfirmResponse;
  return proto.ibc.core.channel.v1.MsgChannelCloseConfirmResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ibc.core.channel.v1.MsgChannelCloseConfirmResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ibc.core.channel.v1.MsgChannelCloseConfirmResponse}
 */
proto.ibc.core.channel.v1.MsgChannelCloseConfirmResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ibc.core.channel.v1.MsgChannelCloseConfirmResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ibc.core.channel.v1.MsgChannelCloseConfirmResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ibc.core.channel.v1.MsgChannelCloseConfirmResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.core.channel.v1.MsgChannelCloseConfirmResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ibc.core.channel.v1.MsgRecvPacket.prototype.toObject = function(opt_includeInstance) {
  return proto.ibc.core.channel.v1.MsgRecvPacket.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ibc.core.channel.v1.MsgRecvPacket} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.core.channel.v1.MsgRecvPacket.toObject = function(includeInstance, msg) {
  var f, obj = {
    packet: (f = msg.getPacket()) && ibc_core_channel_v1_channel_pb.Packet.toObject(includeInstance, f),
    proofCommitment: msg.getProofCommitment_asB64(),
    proofHeight: (f = msg.getProofHeight()) && ibc_core_client_v1_client_pb.Height.toObject(includeInstance, f),
    signer: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ibc.core.channel.v1.MsgRecvPacket}
 */
proto.ibc.core.channel.v1.MsgRecvPacket.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ibc.core.channel.v1.MsgRecvPacket;
  return proto.ibc.core.channel.v1.MsgRecvPacket.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ibc.core.channel.v1.MsgRecvPacket} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ibc.core.channel.v1.MsgRecvPacket}
 */
proto.ibc.core.channel.v1.MsgRecvPacket.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new ibc_core_channel_v1_channel_pb.Packet;
      reader.readMessage(value,ibc_core_channel_v1_channel_pb.Packet.deserializeBinaryFromReader);
      msg.setPacket(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setProofCommitment(value);
      break;
    case 3:
      var value = new ibc_core_client_v1_client_pb.Height;
      reader.readMessage(value,ibc_core_client_v1_client_pb.Height.deserializeBinaryFromReader);
      msg.setProofHeight(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSigner(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ibc.core.channel.v1.MsgRecvPacket.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ibc.core.channel.v1.MsgRecvPacket.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ibc.core.channel.v1.MsgRecvPacket} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.core.channel.v1.MsgRecvPacket.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPacket();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      ibc_core_channel_v1_channel_pb.Packet.serializeBinaryToWriter
    );
  }
  f = message.getProofCommitment_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getProofHeight();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      ibc_core_client_v1_client_pb.Height.serializeBinaryToWriter
    );
  }
  f = message.getSigner();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional Packet packet = 1;
 * @return {?proto.ibc.core.channel.v1.Packet}
 */
proto.ibc.core.channel.v1.MsgRecvPacket.prototype.getPacket = function() {
  return /** @type{?proto.ibc.core.channel.v1.Packet} */ (
    jspb.Message.getWrapperField(this, ibc_core_channel_v1_channel_pb.Packet, 1));
};


/**
 * @param {?proto.ibc.core.channel.v1.Packet|undefined} value
 * @return {!proto.ibc.core.channel.v1.MsgRecvPacket} returns this
*/
proto.ibc.core.channel.v1.MsgRecvPacket.prototype.setPacket = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ibc.core.channel.v1.MsgRecvPacket} returns this
 */
proto.ibc.core.channel.v1.MsgRecvPacket.prototype.clearPacket = function() {
  return this.setPacket(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ibc.core.channel.v1.MsgRecvPacket.prototype.hasPacket = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes proof_commitment = 2;
 * @return {!(string|Uint8Array)}
 */
proto.ibc.core.channel.v1.MsgRecvPacket.prototype.getProofCommitment = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes proof_commitment = 2;
 * This is a type-conversion wrapper around `getProofCommitment()`
 * @return {string}
 */
proto.ibc.core.channel.v1.MsgRecvPacket.prototype.getProofCommitment_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getProofCommitment()));
};


/**
 * optional bytes proof_commitment = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getProofCommitment()`
 * @return {!Uint8Array}
 */
proto.ibc.core.channel.v1.MsgRecvPacket.prototype.getProofCommitment_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getProofCommitment()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ibc.core.channel.v1.MsgRecvPacket} returns this
 */
proto.ibc.core.channel.v1.MsgRecvPacket.prototype.setProofCommitment = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional ibc.core.client.v1.Height proof_height = 3;
 * @return {?proto.ibc.core.client.v1.Height}
 */
proto.ibc.core.channel.v1.MsgRecvPacket.prototype.getProofHeight = function() {
  return /** @type{?proto.ibc.core.client.v1.Height} */ (
    jspb.Message.getWrapperField(this, ibc_core_client_v1_client_pb.Height, 3));
};


/**
 * @param {?proto.ibc.core.client.v1.Height|undefined} value
 * @return {!proto.ibc.core.channel.v1.MsgRecvPacket} returns this
*/
proto.ibc.core.channel.v1.MsgRecvPacket.prototype.setProofHeight = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ibc.core.channel.v1.MsgRecvPacket} returns this
 */
proto.ibc.core.channel.v1.MsgRecvPacket.prototype.clearProofHeight = function() {
  return this.setProofHeight(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ibc.core.channel.v1.MsgRecvPacket.prototype.hasProofHeight = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string signer = 4;
 * @return {string}
 */
proto.ibc.core.channel.v1.MsgRecvPacket.prototype.getSigner = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.ibc.core.channel.v1.MsgRecvPacket} returns this
 */
proto.ibc.core.channel.v1.MsgRecvPacket.prototype.setSigner = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ibc.core.channel.v1.MsgRecvPacketResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ibc.core.channel.v1.MsgRecvPacketResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ibc.core.channel.v1.MsgRecvPacketResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.core.channel.v1.MsgRecvPacketResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ibc.core.channel.v1.MsgRecvPacketResponse}
 */
proto.ibc.core.channel.v1.MsgRecvPacketResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ibc.core.channel.v1.MsgRecvPacketResponse;
  return proto.ibc.core.channel.v1.MsgRecvPacketResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ibc.core.channel.v1.MsgRecvPacketResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ibc.core.channel.v1.MsgRecvPacketResponse}
 */
proto.ibc.core.channel.v1.MsgRecvPacketResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ibc.core.channel.v1.MsgRecvPacketResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ibc.core.channel.v1.MsgRecvPacketResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ibc.core.channel.v1.MsgRecvPacketResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.core.channel.v1.MsgRecvPacketResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ibc.core.channel.v1.MsgTimeout.prototype.toObject = function(opt_includeInstance) {
  return proto.ibc.core.channel.v1.MsgTimeout.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ibc.core.channel.v1.MsgTimeout} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.core.channel.v1.MsgTimeout.toObject = function(includeInstance, msg) {
  var f, obj = {
    packet: (f = msg.getPacket()) && ibc_core_channel_v1_channel_pb.Packet.toObject(includeInstance, f),
    proofUnreceived: msg.getProofUnreceived_asB64(),
    proofHeight: (f = msg.getProofHeight()) && ibc_core_client_v1_client_pb.Height.toObject(includeInstance, f),
    nextSequenceRecv: jspb.Message.getFieldWithDefault(msg, 4, 0),
    signer: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ibc.core.channel.v1.MsgTimeout}
 */
proto.ibc.core.channel.v1.MsgTimeout.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ibc.core.channel.v1.MsgTimeout;
  return proto.ibc.core.channel.v1.MsgTimeout.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ibc.core.channel.v1.MsgTimeout} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ibc.core.channel.v1.MsgTimeout}
 */
proto.ibc.core.channel.v1.MsgTimeout.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new ibc_core_channel_v1_channel_pb.Packet;
      reader.readMessage(value,ibc_core_channel_v1_channel_pb.Packet.deserializeBinaryFromReader);
      msg.setPacket(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setProofUnreceived(value);
      break;
    case 3:
      var value = new ibc_core_client_v1_client_pb.Height;
      reader.readMessage(value,ibc_core_client_v1_client_pb.Height.deserializeBinaryFromReader);
      msg.setProofHeight(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNextSequenceRecv(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setSigner(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ibc.core.channel.v1.MsgTimeout.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ibc.core.channel.v1.MsgTimeout.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ibc.core.channel.v1.MsgTimeout} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.core.channel.v1.MsgTimeout.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPacket();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      ibc_core_channel_v1_channel_pb.Packet.serializeBinaryToWriter
    );
  }
  f = message.getProofUnreceived_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getProofHeight();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      ibc_core_client_v1_client_pb.Height.serializeBinaryToWriter
    );
  }
  f = message.getNextSequenceRecv();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getSigner();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional Packet packet = 1;
 * @return {?proto.ibc.core.channel.v1.Packet}
 */
proto.ibc.core.channel.v1.MsgTimeout.prototype.getPacket = function() {
  return /** @type{?proto.ibc.core.channel.v1.Packet} */ (
    jspb.Message.getWrapperField(this, ibc_core_channel_v1_channel_pb.Packet, 1));
};


/**
 * @param {?proto.ibc.core.channel.v1.Packet|undefined} value
 * @return {!proto.ibc.core.channel.v1.MsgTimeout} returns this
*/
proto.ibc.core.channel.v1.MsgTimeout.prototype.setPacket = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ibc.core.channel.v1.MsgTimeout} returns this
 */
proto.ibc.core.channel.v1.MsgTimeout.prototype.clearPacket = function() {
  return this.setPacket(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ibc.core.channel.v1.MsgTimeout.prototype.hasPacket = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes proof_unreceived = 2;
 * @return {!(string|Uint8Array)}
 */
proto.ibc.core.channel.v1.MsgTimeout.prototype.getProofUnreceived = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes proof_unreceived = 2;
 * This is a type-conversion wrapper around `getProofUnreceived()`
 * @return {string}
 */
proto.ibc.core.channel.v1.MsgTimeout.prototype.getProofUnreceived_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getProofUnreceived()));
};


/**
 * optional bytes proof_unreceived = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getProofUnreceived()`
 * @return {!Uint8Array}
 */
proto.ibc.core.channel.v1.MsgTimeout.prototype.getProofUnreceived_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getProofUnreceived()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ibc.core.channel.v1.MsgTimeout} returns this
 */
proto.ibc.core.channel.v1.MsgTimeout.prototype.setProofUnreceived = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional ibc.core.client.v1.Height proof_height = 3;
 * @return {?proto.ibc.core.client.v1.Height}
 */
proto.ibc.core.channel.v1.MsgTimeout.prototype.getProofHeight = function() {
  return /** @type{?proto.ibc.core.client.v1.Height} */ (
    jspb.Message.getWrapperField(this, ibc_core_client_v1_client_pb.Height, 3));
};


/**
 * @param {?proto.ibc.core.client.v1.Height|undefined} value
 * @return {!proto.ibc.core.channel.v1.MsgTimeout} returns this
*/
proto.ibc.core.channel.v1.MsgTimeout.prototype.setProofHeight = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ibc.core.channel.v1.MsgTimeout} returns this
 */
proto.ibc.core.channel.v1.MsgTimeout.prototype.clearProofHeight = function() {
  return this.setProofHeight(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ibc.core.channel.v1.MsgTimeout.prototype.hasProofHeight = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint64 next_sequence_recv = 4;
 * @return {number}
 */
proto.ibc.core.channel.v1.MsgTimeout.prototype.getNextSequenceRecv = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.ibc.core.channel.v1.MsgTimeout} returns this
 */
proto.ibc.core.channel.v1.MsgTimeout.prototype.setNextSequenceRecv = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string signer = 5;
 * @return {string}
 */
proto.ibc.core.channel.v1.MsgTimeout.prototype.getSigner = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.ibc.core.channel.v1.MsgTimeout} returns this
 */
proto.ibc.core.channel.v1.MsgTimeout.prototype.setSigner = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ibc.core.channel.v1.MsgTimeoutResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ibc.core.channel.v1.MsgTimeoutResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ibc.core.channel.v1.MsgTimeoutResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.core.channel.v1.MsgTimeoutResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ibc.core.channel.v1.MsgTimeoutResponse}
 */
proto.ibc.core.channel.v1.MsgTimeoutResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ibc.core.channel.v1.MsgTimeoutResponse;
  return proto.ibc.core.channel.v1.MsgTimeoutResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ibc.core.channel.v1.MsgTimeoutResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ibc.core.channel.v1.MsgTimeoutResponse}
 */
proto.ibc.core.channel.v1.MsgTimeoutResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ibc.core.channel.v1.MsgTimeoutResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ibc.core.channel.v1.MsgTimeoutResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ibc.core.channel.v1.MsgTimeoutResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.core.channel.v1.MsgTimeoutResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ibc.core.channel.v1.MsgTimeoutOnClose.prototype.toObject = function(opt_includeInstance) {
  return proto.ibc.core.channel.v1.MsgTimeoutOnClose.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ibc.core.channel.v1.MsgTimeoutOnClose} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.core.channel.v1.MsgTimeoutOnClose.toObject = function(includeInstance, msg) {
  var f, obj = {
    packet: (f = msg.getPacket()) && ibc_core_channel_v1_channel_pb.Packet.toObject(includeInstance, f),
    proofUnreceived: msg.getProofUnreceived_asB64(),
    proofClose: msg.getProofClose_asB64(),
    proofHeight: (f = msg.getProofHeight()) && ibc_core_client_v1_client_pb.Height.toObject(includeInstance, f),
    nextSequenceRecv: jspb.Message.getFieldWithDefault(msg, 5, 0),
    signer: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ibc.core.channel.v1.MsgTimeoutOnClose}
 */
proto.ibc.core.channel.v1.MsgTimeoutOnClose.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ibc.core.channel.v1.MsgTimeoutOnClose;
  return proto.ibc.core.channel.v1.MsgTimeoutOnClose.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ibc.core.channel.v1.MsgTimeoutOnClose} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ibc.core.channel.v1.MsgTimeoutOnClose}
 */
proto.ibc.core.channel.v1.MsgTimeoutOnClose.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new ibc_core_channel_v1_channel_pb.Packet;
      reader.readMessage(value,ibc_core_channel_v1_channel_pb.Packet.deserializeBinaryFromReader);
      msg.setPacket(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setProofUnreceived(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setProofClose(value);
      break;
    case 4:
      var value = new ibc_core_client_v1_client_pb.Height;
      reader.readMessage(value,ibc_core_client_v1_client_pb.Height.deserializeBinaryFromReader);
      msg.setProofHeight(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNextSequenceRecv(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setSigner(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ibc.core.channel.v1.MsgTimeoutOnClose.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ibc.core.channel.v1.MsgTimeoutOnClose.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ibc.core.channel.v1.MsgTimeoutOnClose} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.core.channel.v1.MsgTimeoutOnClose.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPacket();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      ibc_core_channel_v1_channel_pb.Packet.serializeBinaryToWriter
    );
  }
  f = message.getProofUnreceived_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getProofClose_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getProofHeight();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      ibc_core_client_v1_client_pb.Height.serializeBinaryToWriter
    );
  }
  f = message.getNextSequenceRecv();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getSigner();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional Packet packet = 1;
 * @return {?proto.ibc.core.channel.v1.Packet}
 */
proto.ibc.core.channel.v1.MsgTimeoutOnClose.prototype.getPacket = function() {
  return /** @type{?proto.ibc.core.channel.v1.Packet} */ (
    jspb.Message.getWrapperField(this, ibc_core_channel_v1_channel_pb.Packet, 1));
};


/**
 * @param {?proto.ibc.core.channel.v1.Packet|undefined} value
 * @return {!proto.ibc.core.channel.v1.MsgTimeoutOnClose} returns this
*/
proto.ibc.core.channel.v1.MsgTimeoutOnClose.prototype.setPacket = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ibc.core.channel.v1.MsgTimeoutOnClose} returns this
 */
proto.ibc.core.channel.v1.MsgTimeoutOnClose.prototype.clearPacket = function() {
  return this.setPacket(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ibc.core.channel.v1.MsgTimeoutOnClose.prototype.hasPacket = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes proof_unreceived = 2;
 * @return {!(string|Uint8Array)}
 */
proto.ibc.core.channel.v1.MsgTimeoutOnClose.prototype.getProofUnreceived = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes proof_unreceived = 2;
 * This is a type-conversion wrapper around `getProofUnreceived()`
 * @return {string}
 */
proto.ibc.core.channel.v1.MsgTimeoutOnClose.prototype.getProofUnreceived_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getProofUnreceived()));
};


/**
 * optional bytes proof_unreceived = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getProofUnreceived()`
 * @return {!Uint8Array}
 */
proto.ibc.core.channel.v1.MsgTimeoutOnClose.prototype.getProofUnreceived_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getProofUnreceived()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ibc.core.channel.v1.MsgTimeoutOnClose} returns this
 */
proto.ibc.core.channel.v1.MsgTimeoutOnClose.prototype.setProofUnreceived = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes proof_close = 3;
 * @return {!(string|Uint8Array)}
 */
proto.ibc.core.channel.v1.MsgTimeoutOnClose.prototype.getProofClose = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes proof_close = 3;
 * This is a type-conversion wrapper around `getProofClose()`
 * @return {string}
 */
proto.ibc.core.channel.v1.MsgTimeoutOnClose.prototype.getProofClose_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getProofClose()));
};


/**
 * optional bytes proof_close = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getProofClose()`
 * @return {!Uint8Array}
 */
proto.ibc.core.channel.v1.MsgTimeoutOnClose.prototype.getProofClose_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getProofClose()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ibc.core.channel.v1.MsgTimeoutOnClose} returns this
 */
proto.ibc.core.channel.v1.MsgTimeoutOnClose.prototype.setProofClose = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional ibc.core.client.v1.Height proof_height = 4;
 * @return {?proto.ibc.core.client.v1.Height}
 */
proto.ibc.core.channel.v1.MsgTimeoutOnClose.prototype.getProofHeight = function() {
  return /** @type{?proto.ibc.core.client.v1.Height} */ (
    jspb.Message.getWrapperField(this, ibc_core_client_v1_client_pb.Height, 4));
};


/**
 * @param {?proto.ibc.core.client.v1.Height|undefined} value
 * @return {!proto.ibc.core.channel.v1.MsgTimeoutOnClose} returns this
*/
proto.ibc.core.channel.v1.MsgTimeoutOnClose.prototype.setProofHeight = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ibc.core.channel.v1.MsgTimeoutOnClose} returns this
 */
proto.ibc.core.channel.v1.MsgTimeoutOnClose.prototype.clearProofHeight = function() {
  return this.setProofHeight(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ibc.core.channel.v1.MsgTimeoutOnClose.prototype.hasProofHeight = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional uint64 next_sequence_recv = 5;
 * @return {number}
 */
proto.ibc.core.channel.v1.MsgTimeoutOnClose.prototype.getNextSequenceRecv = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.ibc.core.channel.v1.MsgTimeoutOnClose} returns this
 */
proto.ibc.core.channel.v1.MsgTimeoutOnClose.prototype.setNextSequenceRecv = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string signer = 6;
 * @return {string}
 */
proto.ibc.core.channel.v1.MsgTimeoutOnClose.prototype.getSigner = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.ibc.core.channel.v1.MsgTimeoutOnClose} returns this
 */
proto.ibc.core.channel.v1.MsgTimeoutOnClose.prototype.setSigner = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ibc.core.channel.v1.MsgTimeoutOnCloseResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ibc.core.channel.v1.MsgTimeoutOnCloseResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ibc.core.channel.v1.MsgTimeoutOnCloseResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.core.channel.v1.MsgTimeoutOnCloseResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ibc.core.channel.v1.MsgTimeoutOnCloseResponse}
 */
proto.ibc.core.channel.v1.MsgTimeoutOnCloseResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ibc.core.channel.v1.MsgTimeoutOnCloseResponse;
  return proto.ibc.core.channel.v1.MsgTimeoutOnCloseResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ibc.core.channel.v1.MsgTimeoutOnCloseResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ibc.core.channel.v1.MsgTimeoutOnCloseResponse}
 */
proto.ibc.core.channel.v1.MsgTimeoutOnCloseResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ibc.core.channel.v1.MsgTimeoutOnCloseResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ibc.core.channel.v1.MsgTimeoutOnCloseResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ibc.core.channel.v1.MsgTimeoutOnCloseResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.core.channel.v1.MsgTimeoutOnCloseResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ibc.core.channel.v1.MsgAcknowledgement.prototype.toObject = function(opt_includeInstance) {
  return proto.ibc.core.channel.v1.MsgAcknowledgement.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ibc.core.channel.v1.MsgAcknowledgement} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.core.channel.v1.MsgAcknowledgement.toObject = function(includeInstance, msg) {
  var f, obj = {
    packet: (f = msg.getPacket()) && ibc_core_channel_v1_channel_pb.Packet.toObject(includeInstance, f),
    acknowledgement: msg.getAcknowledgement_asB64(),
    proofAcked: msg.getProofAcked_asB64(),
    proofHeight: (f = msg.getProofHeight()) && ibc_core_client_v1_client_pb.Height.toObject(includeInstance, f),
    signer: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ibc.core.channel.v1.MsgAcknowledgement}
 */
proto.ibc.core.channel.v1.MsgAcknowledgement.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ibc.core.channel.v1.MsgAcknowledgement;
  return proto.ibc.core.channel.v1.MsgAcknowledgement.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ibc.core.channel.v1.MsgAcknowledgement} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ibc.core.channel.v1.MsgAcknowledgement}
 */
proto.ibc.core.channel.v1.MsgAcknowledgement.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new ibc_core_channel_v1_channel_pb.Packet;
      reader.readMessage(value,ibc_core_channel_v1_channel_pb.Packet.deserializeBinaryFromReader);
      msg.setPacket(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAcknowledgement(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setProofAcked(value);
      break;
    case 4:
      var value = new ibc_core_client_v1_client_pb.Height;
      reader.readMessage(value,ibc_core_client_v1_client_pb.Height.deserializeBinaryFromReader);
      msg.setProofHeight(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setSigner(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ibc.core.channel.v1.MsgAcknowledgement.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ibc.core.channel.v1.MsgAcknowledgement.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ibc.core.channel.v1.MsgAcknowledgement} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.core.channel.v1.MsgAcknowledgement.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPacket();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      ibc_core_channel_v1_channel_pb.Packet.serializeBinaryToWriter
    );
  }
  f = message.getAcknowledgement_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getProofAcked_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getProofHeight();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      ibc_core_client_v1_client_pb.Height.serializeBinaryToWriter
    );
  }
  f = message.getSigner();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional Packet packet = 1;
 * @return {?proto.ibc.core.channel.v1.Packet}
 */
proto.ibc.core.channel.v1.MsgAcknowledgement.prototype.getPacket = function() {
  return /** @type{?proto.ibc.core.channel.v1.Packet} */ (
    jspb.Message.getWrapperField(this, ibc_core_channel_v1_channel_pb.Packet, 1));
};


/**
 * @param {?proto.ibc.core.channel.v1.Packet|undefined} value
 * @return {!proto.ibc.core.channel.v1.MsgAcknowledgement} returns this
*/
proto.ibc.core.channel.v1.MsgAcknowledgement.prototype.setPacket = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ibc.core.channel.v1.MsgAcknowledgement} returns this
 */
proto.ibc.core.channel.v1.MsgAcknowledgement.prototype.clearPacket = function() {
  return this.setPacket(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ibc.core.channel.v1.MsgAcknowledgement.prototype.hasPacket = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes acknowledgement = 2;
 * @return {!(string|Uint8Array)}
 */
proto.ibc.core.channel.v1.MsgAcknowledgement.prototype.getAcknowledgement = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes acknowledgement = 2;
 * This is a type-conversion wrapper around `getAcknowledgement()`
 * @return {string}
 */
proto.ibc.core.channel.v1.MsgAcknowledgement.prototype.getAcknowledgement_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAcknowledgement()));
};


/**
 * optional bytes acknowledgement = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAcknowledgement()`
 * @return {!Uint8Array}
 */
proto.ibc.core.channel.v1.MsgAcknowledgement.prototype.getAcknowledgement_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAcknowledgement()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ibc.core.channel.v1.MsgAcknowledgement} returns this
 */
proto.ibc.core.channel.v1.MsgAcknowledgement.prototype.setAcknowledgement = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes proof_acked = 3;
 * @return {!(string|Uint8Array)}
 */
proto.ibc.core.channel.v1.MsgAcknowledgement.prototype.getProofAcked = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes proof_acked = 3;
 * This is a type-conversion wrapper around `getProofAcked()`
 * @return {string}
 */
proto.ibc.core.channel.v1.MsgAcknowledgement.prototype.getProofAcked_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getProofAcked()));
};


/**
 * optional bytes proof_acked = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getProofAcked()`
 * @return {!Uint8Array}
 */
proto.ibc.core.channel.v1.MsgAcknowledgement.prototype.getProofAcked_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getProofAcked()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ibc.core.channel.v1.MsgAcknowledgement} returns this
 */
proto.ibc.core.channel.v1.MsgAcknowledgement.prototype.setProofAcked = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional ibc.core.client.v1.Height proof_height = 4;
 * @return {?proto.ibc.core.client.v1.Height}
 */
proto.ibc.core.channel.v1.MsgAcknowledgement.prototype.getProofHeight = function() {
  return /** @type{?proto.ibc.core.client.v1.Height} */ (
    jspb.Message.getWrapperField(this, ibc_core_client_v1_client_pb.Height, 4));
};


/**
 * @param {?proto.ibc.core.client.v1.Height|undefined} value
 * @return {!proto.ibc.core.channel.v1.MsgAcknowledgement} returns this
*/
proto.ibc.core.channel.v1.MsgAcknowledgement.prototype.setProofHeight = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ibc.core.channel.v1.MsgAcknowledgement} returns this
 */
proto.ibc.core.channel.v1.MsgAcknowledgement.prototype.clearProofHeight = function() {
  return this.setProofHeight(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ibc.core.channel.v1.MsgAcknowledgement.prototype.hasProofHeight = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string signer = 5;
 * @return {string}
 */
proto.ibc.core.channel.v1.MsgAcknowledgement.prototype.getSigner = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.ibc.core.channel.v1.MsgAcknowledgement} returns this
 */
proto.ibc.core.channel.v1.MsgAcknowledgement.prototype.setSigner = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ibc.core.channel.v1.MsgAcknowledgementResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ibc.core.channel.v1.MsgAcknowledgementResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ibc.core.channel.v1.MsgAcknowledgementResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.core.channel.v1.MsgAcknowledgementResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ibc.core.channel.v1.MsgAcknowledgementResponse}
 */
proto.ibc.core.channel.v1.MsgAcknowledgementResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ibc.core.channel.v1.MsgAcknowledgementResponse;
  return proto.ibc.core.channel.v1.MsgAcknowledgementResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ibc.core.channel.v1.MsgAcknowledgementResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ibc.core.channel.v1.MsgAcknowledgementResponse}
 */
proto.ibc.core.channel.v1.MsgAcknowledgementResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ibc.core.channel.v1.MsgAcknowledgementResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ibc.core.channel.v1.MsgAcknowledgementResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ibc.core.channel.v1.MsgAcknowledgementResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.core.channel.v1.MsgAcknowledgementResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


goog.object.extend(exports, proto.ibc.core.channel.v1);
